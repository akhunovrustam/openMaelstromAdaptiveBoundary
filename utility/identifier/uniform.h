#pragma once
#include <array>
#include <cstring>
#include <string>
#include <tuple>
#include <type_traits>
#include <math/template/nonesuch.h>
#include <math/unit_math.h>
#include <utility>
#include <vector>

#include <utility/identifier/resource_helper.h>
#include <tools/ParameterManager.h>

struct boundaryVolume{
	std::string fileName = "";
	float density = 998.0f;
	float old_density = 998.0f;
	float3 position = {0.f,0.f,0.f};
	float3 velocity = {0.f,0.f,0.f};
	float4 angularVelocity = {CUDART_PI_F * 0.5f,0.f,0.f,0.f};
	float3 angle = {0.f,0.f,0.f};
	int32_t kind = 0;
	std::string animationPath = "";
};
struct inletVolume{
	std::string fileName = "";
	int32_t particles_emitted = 0;
	float duration = -1.f;
	float delay = -1.f;
	float inlet_radius = -1.f;
	float4 emitter_velocity = {0.f,0.f,0.f,0.f};
};
struct movingPlane{
	float3 plane_position = {0.f,0.f,0.f};
	float3 plane_normal = {0.f,0.f,0.f};
	float3 plane_direction = {0.f,0.f,0.f};
	float duration = -1.f;
	float magnitude = 0.f;
	float frequency = 0.f;
	int32_t index = 0;
};
struct outletVolume{
	std::string fileName = "";
	float duration = -1.f;
	float delay = -1.f;
	float flowRate = -1.f;
};
struct particleVolume{
	std::string fileName = "";
	std::string kind = "";
	float concentration = 0.f;
	float timeToEmit = 0.f;
	float3 scale = {0.f,0.f,0.f};
	float3 shift = {0.f,0.f,0.f};
	float3 velocity = {0.f,0.f,0.f};
};
struct rigidVolume{
	std::string fileName = "";
	std::string kind = "";
	float density = 1.f;
	float3 shift = {0.f,0.f,0.f};
	float concentration = 0.f;
	float sampling = 0.7f;
	float3 init_velocity = {0.f,0.f,0.f};
	float3 scale = {0.f,0.f,0.f};
	float timeToEmit = 0.f;
};
struct rtxSphere{
	float radius = 1.f;
	float3 position = {0.f,0.f,0.f};
	float3 emission = {0.f,0.f,0.f};
	float3 color = {0.f,0.f,0.f};
	int32_t refl_t = 0;
};
struct rtxBox{
	std::string maxPosition = "1.f 1.f 1.f";
	std::string minPosition = "0.f 0.f 0.f";
	float3 emission = {0.f,0.f,0.f};
	float3 color = {0.f,0.f,0.f};
	int32_t refl_t = 0;
};

namespace parameters{
	enum struct adaptive : std::size_t {adaptivityScaling = 11463188609853060055ull, adaptivityThreshold = 921279942899180929ull, adaptivityGamma = 18133765510968663679ull, resolution = 3205854095855064093ull, useVolume = 2989399768675262328ull, minVolume = 14792141198422437347ull, detailedAdaptiveStatistics = 15009280547744882038ull, ratio = 12135938955561997642ull, blendSteps = 17938910171463184101ull, delay = 1929958909986906830ull, splitPtcls = 14607785874745194975ull, blendedPtcls = 18018422364699631461ull, mergedPtcls = 2526678646557030713ull, sharedPtcls = 13003085231727899354ull};
	enum struct alembic : std::size_t {file_name = 15395996876319786164ull, fps = 5732123654857702115ull};
	enum struct boundary_volumes : std::size_t {volumeBoundaryCounter = 475230434042472085ull, volume = 4994535019393753745ull};
	enum struct color_map : std::size_t {transfer_mode = 7334218154579654308ull, mapping_mode = 9566994254300444085ull, vectorMode = 9254171844175918249ull, visualizeDirection = 16198179856976829878ull, vectorScale = 342204717643407576ull, vectorScaling = 10524009451653872211ull, min = 1386673213240369047ull, max = 1394288430775844633ull, transfer_fn = 9990912735816154603ull, pruneVoxel = 8572567491819239693ull, mapping_fn = 9903341652736455618ull, autoScaling = 16519107375030688519ull, map_flipped = 17518031544042934778ull, buffer = 13785650824477899227ull, map = 1394297226868870321ull};
	enum struct dfsph_settings : std::size_t {densityError = 17739338325586220906ull, divergenceError = 3861349502501123016ull, densitySolverIterations = 12377525087193616919ull, divergenceSolverIterations = 6526059639019906169ull, densityEta = 1501599960156843604ull, divergenceEta = 10557070713446078282ull};
	enum struct iisph_settings : std::size_t {density_error = 16726432942432724709ull, iterations = 2240372870152335208ull, eta = 634231360606832724ull, jacobi_omega = 16155698990795773170ull};
	enum struct inlet_volumes : std::size_t {volume = 10489484795600141641ull};
	enum struct internal : std::size_t {neighborhood_kind = 3663312375993250091ull, dumpNextframe = 9365765553246467256ull, dumpForSSSPH = 15407020373054297192ull, target = 3609334243846184545ull, hash_size = 3815517483544307020ull, cell_ordering = 3101980211214464389ull, cell_structure = 4253947789945387858ull, num_ptcls = 3034702988293973255ull, num_ptcls_fluid = 5961455647161961024ull, folderName = 13167525015622568695ull, boundaryCounter = 14664881943647729854ull, boundaryLUTSize = 12884619680995818302ull, frame = 7349758294713627365ull, max_velocity = 4122383312077723324ull, min_domain = 821970796073072525ull, max_domain = 11070865468198828095ull, min_coord = 11347560841585163626ull, max_coord = 1948564354460796784ull, cell_size = 12936620919759125552ull, gridSize = 14112273367631109001ull, ptcl_spacing = 7467741614703198501ull, ptcl_support = 12988259692020551779ull, config_file = 8726355893346572133ull, config_folder = 3024914419907800687ull, working_directory = 6620944758961349591ull, build_directory = 355267982351955128ull, source_directory = 14495245407995176029ull, binary_directory = 11729917639393745757ull, timestep = 12922224665689047291ull, simulationTime = 4583553146470672054ull};
	enum struct modules : std::size_t {adaptive = 5320489174544680148ull, pressure = 5799099139507607861ull, volumeBoundary = 17143566827916494946ull, xsph = 4864797705311824767ull, drag = 11942561761355810740ull, viscosity = 8447756713012015361ull, tension = 11789021366952664240ull, vorticity = 6800189161250278861ull, movingBoundaries = 9394993409771562670ull, debug = 11727972034725618061ull, density = 3092924983877041214ull, particleCleanUp = 8541369029635631544ull, volumeInlets = 1305041261022297253ull, volumeOutlets = 16885776574831336466ull, logDump = 14746379964736286470ull, neighborhood = 4380413928090185886ull, neighborSorting = 1378128454503990780ull, rayTracing = 12344527107094984028ull, anisotropicSurface = 2871563533299784682ull, renderMode = 15700346042896164309ull, resorting = 17922896916480650569ull, hash_width = 1069759075369029301ull, alembic = 5028409557300750441ull, error_checking = 3188900490861058573ull, gl_record = 9313785012939753087ull, launch_cfg = 1786535332145276276ull, regex_cfg = 13237873027172452076ull, support = 6240046698426516857ull, surfaceDistance = 4157003950789310102ull, surfaceDetection = 9127226458283218560ull};
	enum struct moving_plane : std::size_t {plane = 10720708678764718796ull};
	enum struct outlet_volumes : std::size_t {volumeOutletCounter = 15700826447029446613ull, volumeOutletTime = 17907793837332045242ull, volume = 17975237260313600214ull};
	enum struct particleSets : std::size_t {set = 9597347375020919730ull};
	enum struct particle_settings : std::size_t {monaghan_viscosity = 6883892713826887148ull, boundaryViscosity = 1915498137301342762ull, xsph_viscosity = 11115625040814233076ull, rigidAdhesion_akinci = 13457218920175557459ull, boundaryAdhesion_akinci = 16529273864937153550ull, tension_akinci = 14695852349132191509ull, air_velocity = 13362999712934313223ull, radius = 2259499034766077375ull, first_fluid = 10905965155408745366ull, max_vel = 3638573063858050273ull, min_vel = 15675599591445236807ull, max_neighbors = 2125843033005588261ull, max_density = 1721885968200589034ull, sdf_resolution = 8589610007270697687ull, sdf_epsilon = 13448589832565683685ull, sdf_minpoint = 14534552011879830439ull, rest_density = 5362499051104477996ull};
	enum struct particle_volumes : std::size_t {volume = 8642513298748729601ull};
	enum struct render_settings : std::size_t {maxAnisotropicSupport = 10920502292021343711ull, apertureRadius = 13113126274738236905ull, anisotropicLambda = 4241992025673257515ull, anisotropicNepsilon = 6053317527748399988ull, anisotropicKs = 12314795226984220550ull, anisotropicKr = 12314796326495848761ull, anisotropicKn = 12314827112821438669ull, focalDistance = 7752716199390545011ull, vrtxNeighborLimit = 14830092578163737544ull, vrtxFluidBias = 5411679822646389612ull, vrtxRenderDomainMin = 6649489909235631105ull, vrtxRenderDomainMax = 6657074340445516783ull, vrtxFlipCameraUp = 189431866297748814ull, vrtxSurfaceExtraction = 6410002921070403499ull, vrtxRenderMode = 7337046450532125916ull, vrtxRenderGrid = 15505524682651552039ull, vrtxRenderFluid = 4218426310545473065ull, vrtxRenderSurface = 8798998691955641790ull, vrtxDisplayStats = 2607245583229292202ull, vrtxRenderBVH = 8501402708010209669ull, vrtxBVHMaterial = 13221234109369963164ull, vrtxRenderNormals = 7133518466264149725ull, vrtxMaterial = 9645692958825213382ull, vrtxDomainEpsilon = 17612311613747943667ull, vrtxDomainMin = 15370298831104427861ull, vrtxDomainMax = 15377874466221287851ull, vrtxDebeerScale = 7929094188825774540ull, vrtxDebeer = 5750397049975007534ull, bvhColor = 8651311296836963508ull, vrtxFluidColor = 2152171732741214192ull, vrtxDepth = 4605898181874731288ull, vrtxDepthScale = 10754568645619259450ull, vrtxWMin = 5244525964917315828ull, vrtxR = 16787645718619782903ull, camera_fov = 3659351033343028404ull, vrtxWMax = 5252105998080688662ull, vrtxBounces = 12576675836554754380ull, auxScale = 6984292174180860351ull, vrtxIOR = 13545275967527097663ull, renderSteps = 4078395270270389734ull, internalLimit = 2455744328811256405ull, auxCellCount = 3463428994618268962ull, axesRender = 13612748299063669810ull, boundsRender = 7819926839055705934ull, floorRender = 6681531798426323927ull, axesScale = 7363498576822406876ull, render_clamp = 9013529871193818331ull, camera_position = 9347181865911797650ull, camera_angle = 17122322829881383424ull, camera_resolution = 14291721691722429143ull, camera_fps = 3662144892389744880ull, gl_file = 2552775485040336463ull};
	enum struct resort : std::size_t {auxCells = 15120332421474873507ull, auxCollisions = 929769749755190115ull, resort_algorithm = 16505338550138247207ull, valid_cells = 10010328726522452540ull, zOrderScale = 13378682839606119240ull, collision_cells = 2707731160578264262ull, occupiedCells = 7907096723842102029ull};
	enum struct rigid_volumes : std::size_t {mesh_resolution = 11064398221926500860ull, gamma = 10134372349079545377ull, beta = 10349714276142860994ull, volume = 10385741700880008178ull};
	enum struct rtxScene : std::size_t {sphere = 2707945300498100158ull, box = 12888010723016043108ull};
	enum struct simulation_settings : std::size_t {external_force = 6627546240167895765ull, timestep_min = 7181435748174714946ull, timestep_max = 7173811734546213672ull, boundaryDampening = 13649008684138585947ull, LUTOffset = 15191979958476107684ull, boundaryObject = 6683139176476346715ull, domainWalls = 12558361584475791203ull, neighborlimit = 13766967029133565487ull, dumpFile = 16660282449664958082ull, maxNumptcls = 5218437161038970872ull, hash_entries = 14108348820635673013ull, mlm_schemes = 3072729766957194257ull, deviceRegex = 6579727397998725335ull, hostRegex = 13675727311796062287ull, debugRegex = 12917388146292395588ull, densitySteps = 18190019136232167529ull};
	enum struct support : std::size_t {support_current_iteration = 2026676816895259965ull, adjusted_particles = 5324959590005192274ull, omega = 11231686598188296659ull, target_neighbors = 12140207246151461785ull, support_leeway = 8319899139838175865ull, overhead_size = 14067518581849417464ull, error_factor = 1684397184333314412ull};
	enum struct surfaceDistance : std::size_t {surface_levelLimit = 7243257339529031398ull, surface_neighborLimit = 13278732776574991748ull, surface_phiMin = 12373095792368754178ull, surface_phiChange = 5862702147189017538ull, surface_distanceFieldDistances = 16337461851709190832ull, surface_iterations = 17573001856531601067ull};
	enum struct vorticitySettings : std::size_t {intertiaInverse = 14502044498828594011ull, viscosityOmega = 4165570126455920419ull, vorticityCoeff = 8952518999957179881ull};
}


	template<typename T, T ident> struct getType{using type = int32_t;};
	std::pair<std::string, std::string> getIdentifier(parameters::adaptive ident);
	template<parameters::adaptive ident> typename getType<parameters::adaptive, ident>::type& get();
	template<> struct getType<parameters::adaptive, parameters::adaptive::adaptivityScaling>{using type = float;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::adaptivityScaling>::type& get<parameters::adaptive::adaptivityScaling>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::adaptivityThreshold>{using type = float;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::adaptivityThreshold>::type& get<parameters::adaptive::adaptivityThreshold>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::adaptivityGamma>{using type = float;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::adaptivityGamma>::type& get<parameters::adaptive::adaptivityGamma>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::resolution>{using type = float;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::resolution>::type& get<parameters::adaptive::resolution>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::useVolume>{using type = int32_t;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::useVolume>::type& get<parameters::adaptive::useVolume>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::minVolume>{using type = float;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::minVolume>::type& get<parameters::adaptive::minVolume>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::detailedAdaptiveStatistics>{using type = int32_t;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::detailedAdaptiveStatistics>::type& get<parameters::adaptive::detailedAdaptiveStatistics>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::ratio>{using type = float;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::ratio>::type& get<parameters::adaptive::ratio>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::blendSteps>{using type = float;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::blendSteps>::type& get<parameters::adaptive::blendSteps>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::delay>{using type = float;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::delay>::type& get<parameters::adaptive::delay>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::splitPtcls>{using type = std::vector<int32_t>;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::splitPtcls>::type& get<parameters::adaptive::splitPtcls>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::blendedPtcls>{using type = int32_t;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::blendedPtcls>::type& get<parameters::adaptive::blendedPtcls>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::mergedPtcls>{using type = std::vector<int32_t>;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::mergedPtcls>::type& get<parameters::adaptive::mergedPtcls>();
	template<> struct getType<parameters::adaptive, parameters::adaptive::sharedPtcls>{using type = std::vector<int32_t>;};
	template<> typename getType<parameters::adaptive,parameters::adaptive::sharedPtcls>::type& get<parameters::adaptive::sharedPtcls>();
	std::pair<std::string, std::string> getIdentifier(parameters::alembic ident);
	template<parameters::alembic ident> typename getType<parameters::alembic, ident>::type& get();
	template<> struct getType<parameters::alembic, parameters::alembic::file_name>{using type = std::string;};
	template<> typename getType<parameters::alembic,parameters::alembic::file_name>::type& get<parameters::alembic::file_name>();
	template<> struct getType<parameters::alembic, parameters::alembic::fps>{using type = int32_t;};
	template<> typename getType<parameters::alembic,parameters::alembic::fps>::type& get<parameters::alembic::fps>();
	std::pair<std::string, std::string> getIdentifier(parameters::boundary_volumes ident);
	template<parameters::boundary_volumes ident> typename getType<parameters::boundary_volumes, ident>::type& get();
	template<> struct getType<parameters::boundary_volumes, parameters::boundary_volumes::volumeBoundaryCounter>{using type = int32_t;};
	template<> typename getType<parameters::boundary_volumes,parameters::boundary_volumes::volumeBoundaryCounter>::type& get<parameters::boundary_volumes::volumeBoundaryCounter>();
	template<> struct getType<parameters::boundary_volumes, parameters::boundary_volumes::volume>{using type = std::vector<boundaryVolume>;};
	template<> typename getType<parameters::boundary_volumes,parameters::boundary_volumes::volume>::type& get<parameters::boundary_volumes::volume>();
	std::pair<std::string, std::string> getIdentifier(parameters::color_map ident);
	template<parameters::color_map ident> typename getType<parameters::color_map, ident>::type& get();
	template<> struct getType<parameters::color_map, parameters::color_map::transfer_mode>{using type = std::string;};
	template<> typename getType<parameters::color_map,parameters::color_map::transfer_mode>::type& get<parameters::color_map::transfer_mode>();
	template<> struct getType<parameters::color_map, parameters::color_map::mapping_mode>{using type = std::string;};
	template<> typename getType<parameters::color_map,parameters::color_map::mapping_mode>::type& get<parameters::color_map::mapping_mode>();
	template<> struct getType<parameters::color_map, parameters::color_map::vectorMode>{using type = std::string;};
	template<> typename getType<parameters::color_map,parameters::color_map::vectorMode>::type& get<parameters::color_map::vectorMode>();
	template<> struct getType<parameters::color_map, parameters::color_map::visualizeDirection>{using type = int32_t;};
	template<> typename getType<parameters::color_map,parameters::color_map::visualizeDirection>::type& get<parameters::color_map::visualizeDirection>();
	template<> struct getType<parameters::color_map, parameters::color_map::vectorScale>{using type = float;};
	template<> typename getType<parameters::color_map,parameters::color_map::vectorScale>::type& get<parameters::color_map::vectorScale>();
	template<> struct getType<parameters::color_map, parameters::color_map::vectorScaling>{using type = int32_t;};
	template<> typename getType<parameters::color_map,parameters::color_map::vectorScaling>::type& get<parameters::color_map::vectorScaling>();
	template<> struct getType<parameters::color_map, parameters::color_map::min>{using type = float;};
	template<> typename getType<parameters::color_map,parameters::color_map::min>::type& get<parameters::color_map::min>();
	template<> struct getType<parameters::color_map, parameters::color_map::max>{using type = float;};
	template<> typename getType<parameters::color_map,parameters::color_map::max>::type& get<parameters::color_map::max>();
	template<> struct getType<parameters::color_map, parameters::color_map::transfer_fn>{using type = int32_t;};
	template<> typename getType<parameters::color_map,parameters::color_map::transfer_fn>::type& get<parameters::color_map::transfer_fn>();
	template<> struct getType<parameters::color_map, parameters::color_map::pruneVoxel>{using type = int32_t;};
	template<> typename getType<parameters::color_map,parameters::color_map::pruneVoxel>::type& get<parameters::color_map::pruneVoxel>();
	template<> struct getType<parameters::color_map, parameters::color_map::mapping_fn>{using type = int32_t;};
	template<> typename getType<parameters::color_map,parameters::color_map::mapping_fn>::type& get<parameters::color_map::mapping_fn>();
	template<> struct getType<parameters::color_map, parameters::color_map::autoScaling>{using type = int;};
	template<> typename getType<parameters::color_map,parameters::color_map::autoScaling>::type& get<parameters::color_map::autoScaling>();
	template<> struct getType<parameters::color_map, parameters::color_map::map_flipped>{using type = int;};
	template<> typename getType<parameters::color_map,parameters::color_map::map_flipped>::type& get<parameters::color_map::map_flipped>();
	template<> struct getType<parameters::color_map, parameters::color_map::buffer>{using type = std::string;};
	template<> typename getType<parameters::color_map,parameters::color_map::buffer>::type& get<parameters::color_map::buffer>();
	template<> struct getType<parameters::color_map, parameters::color_map::map>{using type = std::string;};
	template<> typename getType<parameters::color_map,parameters::color_map::map>::type& get<parameters::color_map::map>();
	std::pair<std::string, std::string> getIdentifier(parameters::dfsph_settings ident);
	template<parameters::dfsph_settings ident> typename getType<parameters::dfsph_settings, ident>::type& get();
	template<> struct getType<parameters::dfsph_settings, parameters::dfsph_settings::densityError>{using type = float;};
	template<> typename getType<parameters::dfsph_settings,parameters::dfsph_settings::densityError>::type& get<parameters::dfsph_settings::densityError>();
	template<> struct getType<parameters::dfsph_settings, parameters::dfsph_settings::divergenceError>{using type = float;};
	template<> typename getType<parameters::dfsph_settings,parameters::dfsph_settings::divergenceError>::type& get<parameters::dfsph_settings::divergenceError>();
	template<> struct getType<parameters::dfsph_settings, parameters::dfsph_settings::densitySolverIterations>{using type = int32_t;};
	template<> typename getType<parameters::dfsph_settings,parameters::dfsph_settings::densitySolverIterations>::type& get<parameters::dfsph_settings::densitySolverIterations>();
	template<> struct getType<parameters::dfsph_settings, parameters::dfsph_settings::divergenceSolverIterations>{using type = int32_t;};
	template<> typename getType<parameters::dfsph_settings,parameters::dfsph_settings::divergenceSolverIterations>::type& get<parameters::dfsph_settings::divergenceSolverIterations>();
	template<> struct getType<parameters::dfsph_settings, parameters::dfsph_settings::densityEta>{using type = float;};
	template<> typename getType<parameters::dfsph_settings,parameters::dfsph_settings::densityEta>::type& get<parameters::dfsph_settings::densityEta>();
	template<> struct getType<parameters::dfsph_settings, parameters::dfsph_settings::divergenceEta>{using type = float;};
	template<> typename getType<parameters::dfsph_settings,parameters::dfsph_settings::divergenceEta>::type& get<parameters::dfsph_settings::divergenceEta>();
	std::pair<std::string, std::string> getIdentifier(parameters::iisph_settings ident);
	template<parameters::iisph_settings ident> typename getType<parameters::iisph_settings, ident>::type& get();
	template<> struct getType<parameters::iisph_settings, parameters::iisph_settings::density_error>{using type = float;};
	template<> typename getType<parameters::iisph_settings,parameters::iisph_settings::density_error>::type& get<parameters::iisph_settings::density_error>();
	template<> struct getType<parameters::iisph_settings, parameters::iisph_settings::iterations>{using type = int32_t;};
	template<> typename getType<parameters::iisph_settings,parameters::iisph_settings::iterations>::type& get<parameters::iisph_settings::iterations>();
	template<> struct getType<parameters::iisph_settings, parameters::iisph_settings::eta>{using type = float;};
	template<> typename getType<parameters::iisph_settings,parameters::iisph_settings::eta>::type& get<parameters::iisph_settings::eta>();
	template<> struct getType<parameters::iisph_settings, parameters::iisph_settings::jacobi_omega>{using type = float;};
	template<> typename getType<parameters::iisph_settings,parameters::iisph_settings::jacobi_omega>::type& get<parameters::iisph_settings::jacobi_omega>();
	std::pair<std::string, std::string> getIdentifier(parameters::inlet_volumes ident);
	template<parameters::inlet_volumes ident> typename getType<parameters::inlet_volumes, ident>::type& get();
	template<> struct getType<parameters::inlet_volumes, parameters::inlet_volumes::volume>{using type = std::vector<inletVolume>;};
	template<> typename getType<parameters::inlet_volumes,parameters::inlet_volumes::volume>::type& get<parameters::inlet_volumes::volume>();
	std::pair<std::string, std::string> getIdentifier(parameters::internal ident);
	template<parameters::internal ident> typename getType<parameters::internal, ident>::type& get();
	template<> struct getType<parameters::internal, parameters::internal::neighborhood_kind>{using type = neighbor_list;};
	template<> typename getType<parameters::internal,parameters::internal::neighborhood_kind>::type& get<parameters::internal::neighborhood_kind>();
	template<> struct getType<parameters::internal, parameters::internal::dumpNextframe>{using type = int32_t;};
	template<> typename getType<parameters::internal,parameters::internal::dumpNextframe>::type& get<parameters::internal::dumpNextframe>();
	template<> struct getType<parameters::internal, parameters::internal::dumpForSSSPH>{using type = int32_t;};
	template<> typename getType<parameters::internal,parameters::internal::dumpForSSSPH>::type& get<parameters::internal::dumpForSSSPH>();
	template<> struct getType<parameters::internal, parameters::internal::target>{using type = launch_config;};
	template<> typename getType<parameters::internal,parameters::internal::target>::type& get<parameters::internal::target>();
	template<> struct getType<parameters::internal, parameters::internal::hash_size>{using type = hash_length;};
	template<> typename getType<parameters::internal,parameters::internal::hash_size>::type& get<parameters::internal::hash_size>();
	template<> struct getType<parameters::internal, parameters::internal::cell_ordering>{using type = cell_ordering;};
	template<> typename getType<parameters::internal,parameters::internal::cell_ordering>::type& get<parameters::internal::cell_ordering>();
	template<> struct getType<parameters::internal, parameters::internal::cell_structure>{using type = cell_structuring;};
	template<> typename getType<parameters::internal,parameters::internal::cell_structure>::type& get<parameters::internal::cell_structure>();
	template<> struct getType<parameters::internal, parameters::internal::num_ptcls>{using type = int32_t;};
	template<> typename getType<parameters::internal,parameters::internal::num_ptcls>::type& get<parameters::internal::num_ptcls>();
	template<> struct getType<parameters::internal, parameters::internal::num_ptcls_fluid>{using type = int32_t;};
	template<> typename getType<parameters::internal,parameters::internal::num_ptcls_fluid>::type& get<parameters::internal::num_ptcls_fluid>();
	template<> struct getType<parameters::internal, parameters::internal::folderName>{using type = std::string;};
	template<> typename getType<parameters::internal,parameters::internal::folderName>::type& get<parameters::internal::folderName>();
	template<> struct getType<parameters::internal, parameters::internal::boundaryCounter>{using type = int32_t;};
	template<> typename getType<parameters::internal,parameters::internal::boundaryCounter>::type& get<parameters::internal::boundaryCounter>();
	template<> struct getType<parameters::internal, parameters::internal::boundaryLUTSize>{using type = int32_t;};
	template<> typename getType<parameters::internal,parameters::internal::boundaryLUTSize>::type& get<parameters::internal::boundaryLUTSize>();
	template<> struct getType<parameters::internal, parameters::internal::frame>{using type = int32_t;};
	template<> typename getType<parameters::internal,parameters::internal::frame>::type& get<parameters::internal::frame>();
	template<> struct getType<parameters::internal, parameters::internal::max_velocity>{using type = float;};
	template<> typename getType<parameters::internal,parameters::internal::max_velocity>::type& get<parameters::internal::max_velocity>();
	template<> struct getType<parameters::internal, parameters::internal::min_domain>{using type = float3;};
	template<> typename getType<parameters::internal,parameters::internal::min_domain>::type& get<parameters::internal::min_domain>();
	template<> struct getType<parameters::internal, parameters::internal::max_domain>{using type = float3;};
	template<> typename getType<parameters::internal,parameters::internal::max_domain>::type& get<parameters::internal::max_domain>();
	template<> struct getType<parameters::internal, parameters::internal::min_coord>{using type = float3;};
	template<> typename getType<parameters::internal,parameters::internal::min_coord>::type& get<parameters::internal::min_coord>();
	template<> struct getType<parameters::internal, parameters::internal::max_coord>{using type = float3;};
	template<> typename getType<parameters::internal,parameters::internal::max_coord>::type& get<parameters::internal::max_coord>();
	template<> struct getType<parameters::internal, parameters::internal::cell_size>{using type = float3;};
	template<> typename getType<parameters::internal,parameters::internal::cell_size>::type& get<parameters::internal::cell_size>();
	template<> struct getType<parameters::internal, parameters::internal::gridSize>{using type = int3;};
	template<> typename getType<parameters::internal,parameters::internal::gridSize>::type& get<parameters::internal::gridSize>();
	template<> struct getType<parameters::internal, parameters::internal::ptcl_spacing>{using type = float;};
	template<> typename getType<parameters::internal,parameters::internal::ptcl_spacing>::type& get<parameters::internal::ptcl_spacing>();
	template<> struct getType<parameters::internal, parameters::internal::ptcl_support>{using type = float;};
	template<> typename getType<parameters::internal,parameters::internal::ptcl_support>::type& get<parameters::internal::ptcl_support>();
	template<> struct getType<parameters::internal, parameters::internal::config_file>{using type = std::string;};
	template<> typename getType<parameters::internal,parameters::internal::config_file>::type& get<parameters::internal::config_file>();
	template<> struct getType<parameters::internal, parameters::internal::config_folder>{using type = std::string;};
	template<> typename getType<parameters::internal,parameters::internal::config_folder>::type& get<parameters::internal::config_folder>();
	template<> struct getType<parameters::internal, parameters::internal::working_directory>{using type = std::string;};
	template<> typename getType<parameters::internal,parameters::internal::working_directory>::type& get<parameters::internal::working_directory>();
	template<> struct getType<parameters::internal, parameters::internal::build_directory>{using type = std::string;};
	template<> typename getType<parameters::internal,parameters::internal::build_directory>::type& get<parameters::internal::build_directory>();
	template<> struct getType<parameters::internal, parameters::internal::source_directory>{using type = std::string;};
	template<> typename getType<parameters::internal,parameters::internal::source_directory>::type& get<parameters::internal::source_directory>();
	template<> struct getType<parameters::internal, parameters::internal::binary_directory>{using type = std::string;};
	template<> typename getType<parameters::internal,parameters::internal::binary_directory>::type& get<parameters::internal::binary_directory>();
	template<> struct getType<parameters::internal, parameters::internal::timestep>{using type = float;};
	template<> typename getType<parameters::internal,parameters::internal::timestep>::type& get<parameters::internal::timestep>();
	template<> struct getType<parameters::internal, parameters::internal::simulationTime>{using type = float;};
	template<> typename getType<parameters::internal,parameters::internal::simulationTime>::type& get<parameters::internal::simulationTime>();
	std::pair<std::string, std::string> getIdentifier(parameters::modules ident);
	template<parameters::modules ident> typename getType<parameters::modules, ident>::type& get();
	template<> struct getType<parameters::modules, parameters::modules::adaptive>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::adaptive>::type& get<parameters::modules::adaptive>();
	template<> struct getType<parameters::modules, parameters::modules::pressure>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::pressure>::type& get<parameters::modules::pressure>();
	template<> struct getType<parameters::modules, parameters::modules::volumeBoundary>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::volumeBoundary>::type& get<parameters::modules::volumeBoundary>();
	template<> struct getType<parameters::modules, parameters::modules::xsph>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::xsph>::type& get<parameters::modules::xsph>();
	template<> struct getType<parameters::modules, parameters::modules::drag>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::drag>::type& get<parameters::modules::drag>();
	template<> struct getType<parameters::modules, parameters::modules::viscosity>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::viscosity>::type& get<parameters::modules::viscosity>();
	template<> struct getType<parameters::modules, parameters::modules::tension>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::tension>::type& get<parameters::modules::tension>();
	template<> struct getType<parameters::modules, parameters::modules::vorticity>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::vorticity>::type& get<parameters::modules::vorticity>();
	template<> struct getType<parameters::modules, parameters::modules::movingBoundaries>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::movingBoundaries>::type& get<parameters::modules::movingBoundaries>();
	template<> struct getType<parameters::modules, parameters::modules::debug>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::debug>::type& get<parameters::modules::debug>();
	template<> struct getType<parameters::modules, parameters::modules::density>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::density>::type& get<parameters::modules::density>();
	template<> struct getType<parameters::modules, parameters::modules::particleCleanUp>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::particleCleanUp>::type& get<parameters::modules::particleCleanUp>();
	template<> struct getType<parameters::modules, parameters::modules::volumeInlets>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::volumeInlets>::type& get<parameters::modules::volumeInlets>();
	template<> struct getType<parameters::modules, parameters::modules::volumeOutlets>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::volumeOutlets>::type& get<parameters::modules::volumeOutlets>();
	template<> struct getType<parameters::modules, parameters::modules::logDump>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::logDump>::type& get<parameters::modules::logDump>();
	template<> struct getType<parameters::modules, parameters::modules::neighborhood>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::neighborhood>::type& get<parameters::modules::neighborhood>();
	template<> struct getType<parameters::modules, parameters::modules::neighborSorting>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::neighborSorting>::type& get<parameters::modules::neighborSorting>();
	template<> struct getType<parameters::modules, parameters::modules::rayTracing>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::rayTracing>::type& get<parameters::modules::rayTracing>();
	template<> struct getType<parameters::modules, parameters::modules::anisotropicSurface>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::anisotropicSurface>::type& get<parameters::modules::anisotropicSurface>();
	template<> struct getType<parameters::modules, parameters::modules::renderMode>{using type = int32_t;};
	template<> typename getType<parameters::modules,parameters::modules::renderMode>::type& get<parameters::modules::renderMode>();
	template<> struct getType<parameters::modules, parameters::modules::resorting>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::resorting>::type& get<parameters::modules::resorting>();
	template<> struct getType<parameters::modules, parameters::modules::hash_width>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::hash_width>::type& get<parameters::modules::hash_width>();
	template<> struct getType<parameters::modules, parameters::modules::alembic>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::alembic>::type& get<parameters::modules::alembic>();
	template<> struct getType<parameters::modules, parameters::modules::error_checking>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::error_checking>::type& get<parameters::modules::error_checking>();
	template<> struct getType<parameters::modules, parameters::modules::gl_record>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::gl_record>::type& get<parameters::modules::gl_record>();
	template<> struct getType<parameters::modules, parameters::modules::launch_cfg>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::launch_cfg>::type& get<parameters::modules::launch_cfg>();
	template<> struct getType<parameters::modules, parameters::modules::regex_cfg>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::regex_cfg>::type& get<parameters::modules::regex_cfg>();
	template<> struct getType<parameters::modules, parameters::modules::support>{using type = std::string;};
	template<> typename getType<parameters::modules,parameters::modules::support>::type& get<parameters::modules::support>();
	template<> struct getType<parameters::modules, parameters::modules::surfaceDistance>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::surfaceDistance>::type& get<parameters::modules::surfaceDistance>();
	template<> struct getType<parameters::modules, parameters::modules::surfaceDetection>{using type = bool;};
	template<> typename getType<parameters::modules,parameters::modules::surfaceDetection>::type& get<parameters::modules::surfaceDetection>();
	std::pair<std::string, std::string> getIdentifier(parameters::moving_plane ident);
	template<parameters::moving_plane ident> typename getType<parameters::moving_plane, ident>::type& get();
	template<> struct getType<parameters::moving_plane, parameters::moving_plane::plane>{using type = std::vector<movingPlane>;};
	template<> typename getType<parameters::moving_plane,parameters::moving_plane::plane>::type& get<parameters::moving_plane::plane>();
	std::pair<std::string, std::string> getIdentifier(parameters::outlet_volumes ident);
	template<parameters::outlet_volumes ident> typename getType<parameters::outlet_volumes, ident>::type& get();
	template<> struct getType<parameters::outlet_volumes, parameters::outlet_volumes::volumeOutletCounter>{using type = int32_t;};
	template<> typename getType<parameters::outlet_volumes,parameters::outlet_volumes::volumeOutletCounter>::type& get<parameters::outlet_volumes::volumeOutletCounter>();
	template<> struct getType<parameters::outlet_volumes, parameters::outlet_volumes::volumeOutletTime>{using type = float;};
	template<> typename getType<parameters::outlet_volumes,parameters::outlet_volumes::volumeOutletTime>::type& get<parameters::outlet_volumes::volumeOutletTime>();
	template<> struct getType<parameters::outlet_volumes, parameters::outlet_volumes::volume>{using type = std::vector<outletVolume>;};
	template<> typename getType<parameters::outlet_volumes,parameters::outlet_volumes::volume>::type& get<parameters::outlet_volumes::volume>();
	std::pair<std::string, std::string> getIdentifier(parameters::particleSets ident);
	template<parameters::particleSets ident> typename getType<parameters::particleSets, ident>::type& get();
	template<> struct getType<parameters::particleSets, parameters::particleSets::set>{using type = std::vector<std::string>;};
	template<> typename getType<parameters::particleSets,parameters::particleSets::set>::type& get<parameters::particleSets::set>();
	std::pair<std::string, std::string> getIdentifier(parameters::particle_settings ident);
	template<parameters::particle_settings ident> typename getType<parameters::particle_settings, ident>::type& get();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::monaghan_viscosity>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::monaghan_viscosity>::type& get<parameters::particle_settings::monaghan_viscosity>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::boundaryViscosity>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::boundaryViscosity>::type& get<parameters::particle_settings::boundaryViscosity>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::xsph_viscosity>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::xsph_viscosity>::type& get<parameters::particle_settings::xsph_viscosity>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::rigidAdhesion_akinci>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::rigidAdhesion_akinci>::type& get<parameters::particle_settings::rigidAdhesion_akinci>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::boundaryAdhesion_akinci>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::boundaryAdhesion_akinci>::type& get<parameters::particle_settings::boundaryAdhesion_akinci>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::tension_akinci>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::tension_akinci>::type& get<parameters::particle_settings::tension_akinci>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::air_velocity>{using type = float4;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::air_velocity>::type& get<parameters::particle_settings::air_velocity>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::radius>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::radius>::type& get<parameters::particle_settings::radius>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::first_fluid>{using type = int;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::first_fluid>::type& get<parameters::particle_settings::first_fluid>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::max_vel>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::max_vel>::type& get<parameters::particle_settings::max_vel>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::min_vel>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::min_vel>::type& get<parameters::particle_settings::min_vel>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::max_neighbors>{using type = int;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::max_neighbors>::type& get<parameters::particle_settings::max_neighbors>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::max_density>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::max_density>::type& get<parameters::particle_settings::max_density>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::sdf_resolution>{using type = int;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::sdf_resolution>::type& get<parameters::particle_settings::sdf_resolution>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::sdf_epsilon>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::sdf_epsilon>::type& get<parameters::particle_settings::sdf_epsilon>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::sdf_minpoint>{using type = float4;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::sdf_minpoint>::type& get<parameters::particle_settings::sdf_minpoint>();
	template<> struct getType<parameters::particle_settings, parameters::particle_settings::rest_density>{using type = float;};
	template<> typename getType<parameters::particle_settings,parameters::particle_settings::rest_density>::type& get<parameters::particle_settings::rest_density>();
	std::pair<std::string, std::string> getIdentifier(parameters::particle_volumes ident);
	template<parameters::particle_volumes ident> typename getType<parameters::particle_volumes, ident>::type& get();
	template<> struct getType<parameters::particle_volumes, parameters::particle_volumes::volume>{using type = std::vector<particleVolume>;};
	template<> typename getType<parameters::particle_volumes,parameters::particle_volumes::volume>::type& get<parameters::particle_volumes::volume>();
	std::pair<std::string, std::string> getIdentifier(parameters::render_settings ident);
	template<parameters::render_settings ident> typename getType<parameters::render_settings, ident>::type& get();
	template<> struct getType<parameters::render_settings, parameters::render_settings::maxAnisotropicSupport>{using type = float4;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::maxAnisotropicSupport>::type& get<parameters::render_settings::maxAnisotropicSupport>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::apertureRadius>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::apertureRadius>::type& get<parameters::render_settings::apertureRadius>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::anisotropicLambda>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::anisotropicLambda>::type& get<parameters::render_settings::anisotropicLambda>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::anisotropicNepsilon>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::anisotropicNepsilon>::type& get<parameters::render_settings::anisotropicNepsilon>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::anisotropicKs>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::anisotropicKs>::type& get<parameters::render_settings::anisotropicKs>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::anisotropicKr>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::anisotropicKr>::type& get<parameters::render_settings::anisotropicKr>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::anisotropicKn>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::anisotropicKn>::type& get<parameters::render_settings::anisotropicKn>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::focalDistance>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::focalDistance>::type& get<parameters::render_settings::focalDistance>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxNeighborLimit>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxNeighborLimit>::type& get<parameters::render_settings::vrtxNeighborLimit>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxFluidBias>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxFluidBias>::type& get<parameters::render_settings::vrtxFluidBias>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxRenderDomainMin>{using type = float3;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxRenderDomainMin>::type& get<parameters::render_settings::vrtxRenderDomainMin>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxRenderDomainMax>{using type = float3;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxRenderDomainMax>::type& get<parameters::render_settings::vrtxRenderDomainMax>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxFlipCameraUp>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxFlipCameraUp>::type& get<parameters::render_settings::vrtxFlipCameraUp>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxSurfaceExtraction>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxSurfaceExtraction>::type& get<parameters::render_settings::vrtxSurfaceExtraction>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxRenderMode>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxRenderMode>::type& get<parameters::render_settings::vrtxRenderMode>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxRenderGrid>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxRenderGrid>::type& get<parameters::render_settings::vrtxRenderGrid>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxRenderFluid>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxRenderFluid>::type& get<parameters::render_settings::vrtxRenderFluid>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxRenderSurface>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxRenderSurface>::type& get<parameters::render_settings::vrtxRenderSurface>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxDisplayStats>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxDisplayStats>::type& get<parameters::render_settings::vrtxDisplayStats>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxRenderBVH>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxRenderBVH>::type& get<parameters::render_settings::vrtxRenderBVH>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxBVHMaterial>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxBVHMaterial>::type& get<parameters::render_settings::vrtxBVHMaterial>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxRenderNormals>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxRenderNormals>::type& get<parameters::render_settings::vrtxRenderNormals>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxMaterial>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxMaterial>::type& get<parameters::render_settings::vrtxMaterial>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxDomainEpsilon>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxDomainEpsilon>::type& get<parameters::render_settings::vrtxDomainEpsilon>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxDomainMin>{using type = float3;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxDomainMin>::type& get<parameters::render_settings::vrtxDomainMin>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxDomainMax>{using type = float3;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxDomainMax>::type& get<parameters::render_settings::vrtxDomainMax>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxDebeerScale>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxDebeerScale>::type& get<parameters::render_settings::vrtxDebeerScale>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxDebeer>{using type = float3;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxDebeer>::type& get<parameters::render_settings::vrtxDebeer>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::bvhColor>{using type = float3;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::bvhColor>::type& get<parameters::render_settings::bvhColor>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxFluidColor>{using type = float3;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxFluidColor>::type& get<parameters::render_settings::vrtxFluidColor>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxDepth>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxDepth>::type& get<parameters::render_settings::vrtxDepth>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxDepthScale>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxDepthScale>::type& get<parameters::render_settings::vrtxDepthScale>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxWMin>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxWMin>::type& get<parameters::render_settings::vrtxWMin>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxR>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxR>::type& get<parameters::render_settings::vrtxR>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::camera_fov>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::camera_fov>::type& get<parameters::render_settings::camera_fov>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxWMax>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxWMax>::type& get<parameters::render_settings::vrtxWMax>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxBounces>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxBounces>::type& get<parameters::render_settings::vrtxBounces>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::auxScale>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::auxScale>::type& get<parameters::render_settings::auxScale>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::vrtxIOR>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::vrtxIOR>::type& get<parameters::render_settings::vrtxIOR>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::renderSteps>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::renderSteps>::type& get<parameters::render_settings::renderSteps>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::internalLimit>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::internalLimit>::type& get<parameters::render_settings::internalLimit>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::auxCellCount>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::auxCellCount>::type& get<parameters::render_settings::auxCellCount>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::axesRender>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::axesRender>::type& get<parameters::render_settings::axesRender>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::boundsRender>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::boundsRender>::type& get<parameters::render_settings::boundsRender>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::floorRender>{using type = int32_t;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::floorRender>::type& get<parameters::render_settings::floorRender>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::axesScale>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::axesScale>::type& get<parameters::render_settings::axesScale>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::render_clamp>{using type = float3;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::render_clamp>::type& get<parameters::render_settings::render_clamp>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::camera_position>{using type = float3;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::camera_position>::type& get<parameters::render_settings::camera_position>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::camera_angle>{using type = float3;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::camera_angle>::type& get<parameters::render_settings::camera_angle>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::camera_resolution>{using type = float2;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::camera_resolution>::type& get<parameters::render_settings::camera_resolution>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::camera_fps>{using type = float;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::camera_fps>::type& get<parameters::render_settings::camera_fps>();
	template<> struct getType<parameters::render_settings, parameters::render_settings::gl_file>{using type = std::string;};
	template<> typename getType<parameters::render_settings,parameters::render_settings::gl_file>::type& get<parameters::render_settings::gl_file>();
	std::pair<std::string, std::string> getIdentifier(parameters::resort ident);
	template<parameters::resort ident> typename getType<parameters::resort, ident>::type& get();
	template<> struct getType<parameters::resort, parameters::resort::auxCells>{using type = int;};
	template<> typename getType<parameters::resort,parameters::resort::auxCells>::type& get<parameters::resort::auxCells>();
	template<> struct getType<parameters::resort, parameters::resort::auxCollisions>{using type = int;};
	template<> typename getType<parameters::resort,parameters::resort::auxCollisions>::type& get<parameters::resort::auxCollisions>();
	template<> struct getType<parameters::resort, parameters::resort::resort_algorithm>{using type = int;};
	template<> typename getType<parameters::resort,parameters::resort::resort_algorithm>::type& get<parameters::resort::resort_algorithm>();
	template<> struct getType<parameters::resort, parameters::resort::valid_cells>{using type = int;};
	template<> typename getType<parameters::resort,parameters::resort::valid_cells>::type& get<parameters::resort::valid_cells>();
	template<> struct getType<parameters::resort, parameters::resort::zOrderScale>{using type = float;};
	template<> typename getType<parameters::resort,parameters::resort::zOrderScale>::type& get<parameters::resort::zOrderScale>();
	template<> struct getType<parameters::resort, parameters::resort::collision_cells>{using type = int;};
	template<> typename getType<parameters::resort,parameters::resort::collision_cells>::type& get<parameters::resort::collision_cells>();
	template<> struct getType<parameters::resort, parameters::resort::occupiedCells>{using type = std::vector<int32_t>;};
	template<> typename getType<parameters::resort,parameters::resort::occupiedCells>::type& get<parameters::resort::occupiedCells>();
	std::pair<std::string, std::string> getIdentifier(parameters::rigid_volumes ident);
	template<parameters::rigid_volumes ident> typename getType<parameters::rigid_volumes, ident>::type& get();
	template<> struct getType<parameters::rigid_volumes, parameters::rigid_volumes::mesh_resolution>{using type = int;};
	template<> typename getType<parameters::rigid_volumes,parameters::rigid_volumes::mesh_resolution>::type& get<parameters::rigid_volumes::mesh_resolution>();
	template<> struct getType<parameters::rigid_volumes, parameters::rigid_volumes::gamma>{using type = float;};
	template<> typename getType<parameters::rigid_volumes,parameters::rigid_volumes::gamma>::type& get<parameters::rigid_volumes::gamma>();
	template<> struct getType<parameters::rigid_volumes, parameters::rigid_volumes::beta>{using type = float;};
	template<> typename getType<parameters::rigid_volumes,parameters::rigid_volumes::beta>::type& get<parameters::rigid_volumes::beta>();
	template<> struct getType<parameters::rigid_volumes, parameters::rigid_volumes::volume>{using type = std::vector<rigidVolume>;};
	template<> typename getType<parameters::rigid_volumes,parameters::rigid_volumes::volume>::type& get<parameters::rigid_volumes::volume>();
	std::pair<std::string, std::string> getIdentifier(parameters::rtxScene ident);
	template<parameters::rtxScene ident> typename getType<parameters::rtxScene, ident>::type& get();
	template<> struct getType<parameters::rtxScene, parameters::rtxScene::sphere>{using type = std::vector<rtxSphere>;};
	template<> typename getType<parameters::rtxScene,parameters::rtxScene::sphere>::type& get<parameters::rtxScene::sphere>();
	template<> struct getType<parameters::rtxScene, parameters::rtxScene::box>{using type = std::vector<rtxBox>;};
	template<> typename getType<parameters::rtxScene,parameters::rtxScene::box>::type& get<parameters::rtxScene::box>();
	std::pair<std::string, std::string> getIdentifier(parameters::simulation_settings ident);
	template<parameters::simulation_settings ident> typename getType<parameters::simulation_settings, ident>::type& get();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::external_force>{using type = float4;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::external_force>::type& get<parameters::simulation_settings::external_force>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::timestep_min>{using type = float;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::timestep_min>::type& get<parameters::simulation_settings::timestep_min>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::timestep_max>{using type = float;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::timestep_max>::type& get<parameters::simulation_settings::timestep_max>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::boundaryDampening>{using type = float;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::boundaryDampening>::type& get<parameters::simulation_settings::boundaryDampening>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::LUTOffset>{using type = float;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::LUTOffset>::type& get<parameters::simulation_settings::LUTOffset>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::boundaryObject>{using type = std::string;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::boundaryObject>::type& get<parameters::simulation_settings::boundaryObject>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::domainWalls>{using type = std::string;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::domainWalls>::type& get<parameters::simulation_settings::domainWalls>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::neighborlimit>{using type = int32_t;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::neighborlimit>::type& get<parameters::simulation_settings::neighborlimit>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::dumpFile>{using type = std::string;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::dumpFile>::type& get<parameters::simulation_settings::dumpFile>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::maxNumptcls>{using type = int32_t;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::maxNumptcls>::type& get<parameters::simulation_settings::maxNumptcls>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::hash_entries>{using type = uint32_t;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::hash_entries>::type& get<parameters::simulation_settings::hash_entries>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::mlm_schemes>{using type = uint32_t;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::mlm_schemes>::type& get<parameters::simulation_settings::mlm_schemes>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::deviceRegex>{using type = std::string;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::deviceRegex>::type& get<parameters::simulation_settings::deviceRegex>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::hostRegex>{using type = std::string;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::hostRegex>::type& get<parameters::simulation_settings::hostRegex>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::debugRegex>{using type = std::string;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::debugRegex>::type& get<parameters::simulation_settings::debugRegex>();
	template<> struct getType<parameters::simulation_settings, parameters::simulation_settings::densitySteps>{using type = int32_t;};
	template<> typename getType<parameters::simulation_settings,parameters::simulation_settings::densitySteps>::type& get<parameters::simulation_settings::densitySteps>();
	std::pair<std::string, std::string> getIdentifier(parameters::support ident);
	template<parameters::support ident> typename getType<parameters::support, ident>::type& get();
	template<> struct getType<parameters::support, parameters::support::support_current_iteration>{using type = uint32_t;};
	template<> typename getType<parameters::support,parameters::support::support_current_iteration>::type& get<parameters::support::support_current_iteration>();
	template<> struct getType<parameters::support, parameters::support::adjusted_particles>{using type = int32_t;};
	template<> typename getType<parameters::support,parameters::support::adjusted_particles>::type& get<parameters::support::adjusted_particles>();
	template<> struct getType<parameters::support, parameters::support::omega>{using type = float;};
	template<> typename getType<parameters::support,parameters::support::omega>::type& get<parameters::support::omega>();
	template<> struct getType<parameters::support, parameters::support::target_neighbors>{using type = int32_t;};
	template<> typename getType<parameters::support,parameters::support::target_neighbors>::type& get<parameters::support::target_neighbors>();
	template<> struct getType<parameters::support, parameters::support::support_leeway>{using type = int32_t;};
	template<> typename getType<parameters::support,parameters::support::support_leeway>::type& get<parameters::support::support_leeway>();
	template<> struct getType<parameters::support, parameters::support::overhead_size>{using type = int32_t;};
	template<> typename getType<parameters::support,parameters::support::overhead_size>::type& get<parameters::support::overhead_size>();
	template<> struct getType<parameters::support, parameters::support::error_factor>{using type = int32_t;};
	template<> typename getType<parameters::support,parameters::support::error_factor>::type& get<parameters::support::error_factor>();
	std::pair<std::string, std::string> getIdentifier(parameters::surfaceDistance ident);
	template<parameters::surfaceDistance ident> typename getType<parameters::surfaceDistance, ident>::type& get();
	template<> struct getType<parameters::surfaceDistance, parameters::surfaceDistance::surface_levelLimit>{using type = float;};
	template<> typename getType<parameters::surfaceDistance,parameters::surfaceDistance::surface_levelLimit>::type& get<parameters::surfaceDistance::surface_levelLimit>();
	template<> struct getType<parameters::surfaceDistance, parameters::surfaceDistance::surface_neighborLimit>{using type = int32_t;};
	template<> typename getType<parameters::surfaceDistance,parameters::surfaceDistance::surface_neighborLimit>::type& get<parameters::surfaceDistance::surface_neighborLimit>();
	template<> struct getType<parameters::surfaceDistance, parameters::surfaceDistance::surface_phiMin>{using type = float;};
	template<> typename getType<parameters::surfaceDistance,parameters::surfaceDistance::surface_phiMin>::type& get<parameters::surfaceDistance::surface_phiMin>();
	template<> struct getType<parameters::surfaceDistance, parameters::surfaceDistance::surface_phiChange>{using type = float;};
	template<> typename getType<parameters::surfaceDistance,parameters::surfaceDistance::surface_phiChange>::type& get<parameters::surfaceDistance::surface_phiChange>();
	template<> struct getType<parameters::surfaceDistance, parameters::surfaceDistance::surface_distanceFieldDistances>{using type = float3;};
	template<> typename getType<parameters::surfaceDistance,parameters::surfaceDistance::surface_distanceFieldDistances>::type& get<parameters::surfaceDistance::surface_distanceFieldDistances>();
	template<> struct getType<parameters::surfaceDistance, parameters::surfaceDistance::surface_iterations>{using type = int32_t;};
	template<> typename getType<parameters::surfaceDistance,parameters::surfaceDistance::surface_iterations>::type& get<parameters::surfaceDistance::surface_iterations>();
	std::pair<std::string, std::string> getIdentifier(parameters::vorticitySettings ident);
	template<parameters::vorticitySettings ident> typename getType<parameters::vorticitySettings, ident>::type& get();
	template<> struct getType<parameters::vorticitySettings, parameters::vorticitySettings::intertiaInverse>{using type = float;};
	template<> typename getType<parameters::vorticitySettings,parameters::vorticitySettings::intertiaInverse>::type& get<parameters::vorticitySettings::intertiaInverse>();
	template<> struct getType<parameters::vorticitySettings, parameters::vorticitySettings::viscosityOmega>{using type = float;};
	template<> typename getType<parameters::vorticitySettings,parameters::vorticitySettings::viscosityOmega>::type& get<parameters::vorticitySettings::viscosityOmega>();
	template<> struct getType<parameters::vorticitySettings, parameters::vorticitySettings::vorticityCoeff>{using type = float;};
	template<> typename getType<parameters::vorticitySettings,parameters::vorticitySettings::vorticityCoeff>::type& get<parameters::vorticitySettings::vorticityCoeff>();
	template<typename T, T ident> struct getUType{using type = int32_t;};
	template<parameters::adaptive ident> typename getUType<parameters::adaptive, ident>::type& uGet();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::adaptivityScaling>{using type = float;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::adaptivityScaling>::type& uGet<parameters::adaptive::adaptivityScaling>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::adaptivityThreshold>{using type = float;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::adaptivityThreshold>::type& uGet<parameters::adaptive::adaptivityThreshold>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::adaptivityGamma>{using type = float;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::adaptivityGamma>::type& uGet<parameters::adaptive::adaptivityGamma>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::resolution>{using type = float;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::resolution>::type& uGet<parameters::adaptive::resolution>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::useVolume>{using type = int32_t;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::useVolume>::type& uGet<parameters::adaptive::useVolume>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::minVolume>{using type = uFloat<SI::volume>;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::minVolume>::type& uGet<parameters::adaptive::minVolume>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::detailedAdaptiveStatistics>{using type = int32_t;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::detailedAdaptiveStatistics>::type& uGet<parameters::adaptive::detailedAdaptiveStatistics>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::ratio>{using type = float;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::ratio>::type& uGet<parameters::adaptive::ratio>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::blendSteps>{using type = float;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::blendSteps>::type& uGet<parameters::adaptive::blendSteps>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::delay>{using type = uFloat<SI::s>;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::delay>::type& uGet<parameters::adaptive::delay>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::splitPtcls>{using type = std::vector<int32_t>;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::splitPtcls>::type& uGet<parameters::adaptive::splitPtcls>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::blendedPtcls>{using type = int32_t;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::blendedPtcls>::type& uGet<parameters::adaptive::blendedPtcls>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::mergedPtcls>{using type = std::vector<int32_t>;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::mergedPtcls>::type& uGet<parameters::adaptive::mergedPtcls>();
	template<> struct getUType<parameters::adaptive, parameters::adaptive::sharedPtcls>{using type = std::vector<int32_t>;};
	template<> typename getUType<parameters::adaptive,parameters::adaptive::sharedPtcls>::type& uGet<parameters::adaptive::sharedPtcls>();
	template<parameters::alembic ident> typename getUType<parameters::alembic, ident>::type& uGet();
	template<> struct getUType<parameters::alembic, parameters::alembic::file_name>{using type = std::string;};
	template<> typename getUType<parameters::alembic,parameters::alembic::file_name>::type& uGet<parameters::alembic::file_name>();
	template<> struct getUType<parameters::alembic, parameters::alembic::fps>{using type = int32_t;};
	template<> typename getUType<parameters::alembic,parameters::alembic::fps>::type& uGet<parameters::alembic::fps>();
	template<parameters::boundary_volumes ident> typename getUType<parameters::boundary_volumes, ident>::type& uGet();
	template<> struct getUType<parameters::boundary_volumes, parameters::boundary_volumes::volumeBoundaryCounter>{using type = int32_t;};
	template<> typename getUType<parameters::boundary_volumes,parameters::boundary_volumes::volumeBoundaryCounter>::type& uGet<parameters::boundary_volumes::volumeBoundaryCounter>();
	template<> struct getUType<parameters::boundary_volumes, parameters::boundary_volumes::volume>{using type = std::vector<boundaryVolume>;};
	template<> typename getUType<parameters::boundary_volumes,parameters::boundary_volumes::volume>::type& uGet<parameters::boundary_volumes::volume>();
	template<parameters::color_map ident> typename getUType<parameters::color_map, ident>::type& uGet();
	template<> struct getUType<parameters::color_map, parameters::color_map::transfer_mode>{using type = std::string;};
	template<> typename getUType<parameters::color_map,parameters::color_map::transfer_mode>::type& uGet<parameters::color_map::transfer_mode>();
	template<> struct getUType<parameters::color_map, parameters::color_map::mapping_mode>{using type = std::string;};
	template<> typename getUType<parameters::color_map,parameters::color_map::mapping_mode>::type& uGet<parameters::color_map::mapping_mode>();
	template<> struct getUType<parameters::color_map, parameters::color_map::vectorMode>{using type = std::string;};
	template<> typename getUType<parameters::color_map,parameters::color_map::vectorMode>::type& uGet<parameters::color_map::vectorMode>();
	template<> struct getUType<parameters::color_map, parameters::color_map::visualizeDirection>{using type = int32_t;};
	template<> typename getUType<parameters::color_map,parameters::color_map::visualizeDirection>::type& uGet<parameters::color_map::visualizeDirection>();
	template<> struct getUType<parameters::color_map, parameters::color_map::vectorScale>{using type = float;};
	template<> typename getUType<parameters::color_map,parameters::color_map::vectorScale>::type& uGet<parameters::color_map::vectorScale>();
	template<> struct getUType<parameters::color_map, parameters::color_map::vectorScaling>{using type = int32_t;};
	template<> typename getUType<parameters::color_map,parameters::color_map::vectorScaling>::type& uGet<parameters::color_map::vectorScaling>();
	template<> struct getUType<parameters::color_map, parameters::color_map::min>{using type = float;};
	template<> typename getUType<parameters::color_map,parameters::color_map::min>::type& uGet<parameters::color_map::min>();
	template<> struct getUType<parameters::color_map, parameters::color_map::max>{using type = float;};
	template<> typename getUType<parameters::color_map,parameters::color_map::max>::type& uGet<parameters::color_map::max>();
	template<> struct getUType<parameters::color_map, parameters::color_map::transfer_fn>{using type = int32_t;};
	template<> typename getUType<parameters::color_map,parameters::color_map::transfer_fn>::type& uGet<parameters::color_map::transfer_fn>();
	template<> struct getUType<parameters::color_map, parameters::color_map::pruneVoxel>{using type = int32_t;};
	template<> typename getUType<parameters::color_map,parameters::color_map::pruneVoxel>::type& uGet<parameters::color_map::pruneVoxel>();
	template<> struct getUType<parameters::color_map, parameters::color_map::mapping_fn>{using type = int32_t;};
	template<> typename getUType<parameters::color_map,parameters::color_map::mapping_fn>::type& uGet<parameters::color_map::mapping_fn>();
	template<> struct getUType<parameters::color_map, parameters::color_map::autoScaling>{using type = int;};
	template<> typename getUType<parameters::color_map,parameters::color_map::autoScaling>::type& uGet<parameters::color_map::autoScaling>();
	template<> struct getUType<parameters::color_map, parameters::color_map::map_flipped>{using type = int;};
	template<> typename getUType<parameters::color_map,parameters::color_map::map_flipped>::type& uGet<parameters::color_map::map_flipped>();
	template<> struct getUType<parameters::color_map, parameters::color_map::buffer>{using type = std::string;};
	template<> typename getUType<parameters::color_map,parameters::color_map::buffer>::type& uGet<parameters::color_map::buffer>();
	template<> struct getUType<parameters::color_map, parameters::color_map::map>{using type = std::string;};
	template<> typename getUType<parameters::color_map,parameters::color_map::map>::type& uGet<parameters::color_map::map>();
	template<parameters::dfsph_settings ident> typename getUType<parameters::dfsph_settings, ident>::type& uGet();
	template<> struct getUType<parameters::dfsph_settings, parameters::dfsph_settings::densityError>{using type = float;};
	template<> typename getUType<parameters::dfsph_settings,parameters::dfsph_settings::densityError>::type& uGet<parameters::dfsph_settings::densityError>();
	template<> struct getUType<parameters::dfsph_settings, parameters::dfsph_settings::divergenceError>{using type = uFloat<SI::Hz>;};
	template<> typename getUType<parameters::dfsph_settings,parameters::dfsph_settings::divergenceError>::type& uGet<parameters::dfsph_settings::divergenceError>();
	template<> struct getUType<parameters::dfsph_settings, parameters::dfsph_settings::densitySolverIterations>{using type = int32_t;};
	template<> typename getUType<parameters::dfsph_settings,parameters::dfsph_settings::densitySolverIterations>::type& uGet<parameters::dfsph_settings::densitySolverIterations>();
	template<> struct getUType<parameters::dfsph_settings, parameters::dfsph_settings::divergenceSolverIterations>{using type = int32_t;};
	template<> typename getUType<parameters::dfsph_settings,parameters::dfsph_settings::divergenceSolverIterations>::type& uGet<parameters::dfsph_settings::divergenceSolverIterations>();
	template<> struct getUType<parameters::dfsph_settings, parameters::dfsph_settings::densityEta>{using type = float;};
	template<> typename getUType<parameters::dfsph_settings,parameters::dfsph_settings::densityEta>::type& uGet<parameters::dfsph_settings::densityEta>();
	template<> struct getUType<parameters::dfsph_settings, parameters::dfsph_settings::divergenceEta>{using type = uFloat<SI::Hz>;};
	template<> typename getUType<parameters::dfsph_settings,parameters::dfsph_settings::divergenceEta>::type& uGet<parameters::dfsph_settings::divergenceEta>();
	template<parameters::iisph_settings ident> typename getUType<parameters::iisph_settings, ident>::type& uGet();
	template<> struct getUType<parameters::iisph_settings, parameters::iisph_settings::density_error>{using type = float;};
	template<> typename getUType<parameters::iisph_settings,parameters::iisph_settings::density_error>::type& uGet<parameters::iisph_settings::density_error>();
	template<> struct getUType<parameters::iisph_settings, parameters::iisph_settings::iterations>{using type = int32_t;};
	template<> typename getUType<parameters::iisph_settings,parameters::iisph_settings::iterations>::type& uGet<parameters::iisph_settings::iterations>();
	template<> struct getUType<parameters::iisph_settings, parameters::iisph_settings::eta>{using type = float;};
	template<> typename getUType<parameters::iisph_settings,parameters::iisph_settings::eta>::type& uGet<parameters::iisph_settings::eta>();
	template<> struct getUType<parameters::iisph_settings, parameters::iisph_settings::jacobi_omega>{using type = float;};
	template<> typename getUType<parameters::iisph_settings,parameters::iisph_settings::jacobi_omega>::type& uGet<parameters::iisph_settings::jacobi_omega>();
	template<parameters::inlet_volumes ident> typename getUType<parameters::inlet_volumes, ident>::type& uGet();
	template<> struct getUType<parameters::inlet_volumes, parameters::inlet_volumes::volume>{using type = std::vector<inletVolume>;};
	template<> typename getUType<parameters::inlet_volumes,parameters::inlet_volumes::volume>::type& uGet<parameters::inlet_volumes::volume>();
	template<parameters::internal ident> typename getUType<parameters::internal, ident>::type& uGet();
	template<> struct getUType<parameters::internal, parameters::internal::neighborhood_kind>{using type = neighbor_list;};
	template<> typename getUType<parameters::internal,parameters::internal::neighborhood_kind>::type& uGet<parameters::internal::neighborhood_kind>();
	template<> struct getUType<parameters::internal, parameters::internal::dumpNextframe>{using type = int32_t;};
	template<> typename getUType<parameters::internal,parameters::internal::dumpNextframe>::type& uGet<parameters::internal::dumpNextframe>();
	template<> struct getUType<parameters::internal, parameters::internal::dumpForSSSPH>{using type = int32_t;};
	template<> typename getUType<parameters::internal,parameters::internal::dumpForSSSPH>::type& uGet<parameters::internal::dumpForSSSPH>();
	template<> struct getUType<parameters::internal, parameters::internal::target>{using type = launch_config;};
	template<> typename getUType<parameters::internal,parameters::internal::target>::type& uGet<parameters::internal::target>();
	template<> struct getUType<parameters::internal, parameters::internal::hash_size>{using type = hash_length;};
	template<> typename getUType<parameters::internal,parameters::internal::hash_size>::type& uGet<parameters::internal::hash_size>();
	template<> struct getUType<parameters::internal, parameters::internal::cell_ordering>{using type = cell_ordering;};
	template<> typename getUType<parameters::internal,parameters::internal::cell_ordering>::type& uGet<parameters::internal::cell_ordering>();
	template<> struct getUType<parameters::internal, parameters::internal::cell_structure>{using type = cell_structuring;};
	template<> typename getUType<parameters::internal,parameters::internal::cell_structure>::type& uGet<parameters::internal::cell_structure>();
	template<> struct getUType<parameters::internal, parameters::internal::num_ptcls>{using type = int32_t;};
	template<> typename getUType<parameters::internal,parameters::internal::num_ptcls>::type& uGet<parameters::internal::num_ptcls>();
	template<> struct getUType<parameters::internal, parameters::internal::num_ptcls_fluid>{using type = int32_t;};
	template<> typename getUType<parameters::internal,parameters::internal::num_ptcls_fluid>::type& uGet<parameters::internal::num_ptcls_fluid>();
	template<> struct getUType<parameters::internal, parameters::internal::folderName>{using type = std::string;};
	template<> typename getUType<parameters::internal,parameters::internal::folderName>::type& uGet<parameters::internal::folderName>();
	template<> struct getUType<parameters::internal, parameters::internal::boundaryCounter>{using type = int32_t;};
	template<> typename getUType<parameters::internal,parameters::internal::boundaryCounter>::type& uGet<parameters::internal::boundaryCounter>();
	template<> struct getUType<parameters::internal, parameters::internal::boundaryLUTSize>{using type = int32_t;};
	template<> typename getUType<parameters::internal,parameters::internal::boundaryLUTSize>::type& uGet<parameters::internal::boundaryLUTSize>();
	template<> struct getUType<parameters::internal, parameters::internal::frame>{using type = int32_t;};
	template<> typename getUType<parameters::internal,parameters::internal::frame>::type& uGet<parameters::internal::frame>();
	template<> struct getUType<parameters::internal, parameters::internal::max_velocity>{using type = uFloat<SI::velocity>;};
	template<> typename getUType<parameters::internal,parameters::internal::max_velocity>::type& uGet<parameters::internal::max_velocity>();
	template<> struct getUType<parameters::internal, parameters::internal::min_domain>{using type = uFloat3<SI::m>;};
	template<> typename getUType<parameters::internal,parameters::internal::min_domain>::type& uGet<parameters::internal::min_domain>();
	template<> struct getUType<parameters::internal, parameters::internal::max_domain>{using type = uFloat3<SI::m>;};
	template<> typename getUType<parameters::internal,parameters::internal::max_domain>::type& uGet<parameters::internal::max_domain>();
	template<> struct getUType<parameters::internal, parameters::internal::min_coord>{using type = uFloat3<SI::m>;};
	template<> typename getUType<parameters::internal,parameters::internal::min_coord>::type& uGet<parameters::internal::min_coord>();
	template<> struct getUType<parameters::internal, parameters::internal::max_coord>{using type = uFloat3<SI::m>;};
	template<> typename getUType<parameters::internal,parameters::internal::max_coord>::type& uGet<parameters::internal::max_coord>();
	template<> struct getUType<parameters::internal, parameters::internal::cell_size>{using type = uFloat3<SI::m>;};
	template<> typename getUType<parameters::internal,parameters::internal::cell_size>::type& uGet<parameters::internal::cell_size>();
	template<> struct getUType<parameters::internal, parameters::internal::gridSize>{using type = int3;};
	template<> typename getUType<parameters::internal,parameters::internal::gridSize>::type& uGet<parameters::internal::gridSize>();
	template<> struct getUType<parameters::internal, parameters::internal::ptcl_spacing>{using type = uFloat<SI::m>;};
	template<> typename getUType<parameters::internal,parameters::internal::ptcl_spacing>::type& uGet<parameters::internal::ptcl_spacing>();
	template<> struct getUType<parameters::internal, parameters::internal::ptcl_support>{using type = uFloat<SI::m>;};
	template<> typename getUType<parameters::internal,parameters::internal::ptcl_support>::type& uGet<parameters::internal::ptcl_support>();
	template<> struct getUType<parameters::internal, parameters::internal::config_file>{using type = std::string;};
	template<> typename getUType<parameters::internal,parameters::internal::config_file>::type& uGet<parameters::internal::config_file>();
	template<> struct getUType<parameters::internal, parameters::internal::config_folder>{using type = std::string;};
	template<> typename getUType<parameters::internal,parameters::internal::config_folder>::type& uGet<parameters::internal::config_folder>();
	template<> struct getUType<parameters::internal, parameters::internal::working_directory>{using type = std::string;};
	template<> typename getUType<parameters::internal,parameters::internal::working_directory>::type& uGet<parameters::internal::working_directory>();
	template<> struct getUType<parameters::internal, parameters::internal::build_directory>{using type = std::string;};
	template<> typename getUType<parameters::internal,parameters::internal::build_directory>::type& uGet<parameters::internal::build_directory>();
	template<> struct getUType<parameters::internal, parameters::internal::source_directory>{using type = std::string;};
	template<> typename getUType<parameters::internal,parameters::internal::source_directory>::type& uGet<parameters::internal::source_directory>();
	template<> struct getUType<parameters::internal, parameters::internal::binary_directory>{using type = std::string;};
	template<> typename getUType<parameters::internal,parameters::internal::binary_directory>::type& uGet<parameters::internal::binary_directory>();
	template<> struct getUType<parameters::internal, parameters::internal::timestep>{using type = uFloat<SI::s>;};
	template<> typename getUType<parameters::internal,parameters::internal::timestep>::type& uGet<parameters::internal::timestep>();
	template<> struct getUType<parameters::internal, parameters::internal::simulationTime>{using type = uFloat<SI::s>;};
	template<> typename getUType<parameters::internal,parameters::internal::simulationTime>::type& uGet<parameters::internal::simulationTime>();
	template<parameters::modules ident> typename getUType<parameters::modules, ident>::type& uGet();
	template<> struct getUType<parameters::modules, parameters::modules::adaptive>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::adaptive>::type& uGet<parameters::modules::adaptive>();
	template<> struct getUType<parameters::modules, parameters::modules::pressure>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::pressure>::type& uGet<parameters::modules::pressure>();
	template<> struct getUType<parameters::modules, parameters::modules::volumeBoundary>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::volumeBoundary>::type& uGet<parameters::modules::volumeBoundary>();
	template<> struct getUType<parameters::modules, parameters::modules::xsph>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::xsph>::type& uGet<parameters::modules::xsph>();
	template<> struct getUType<parameters::modules, parameters::modules::drag>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::drag>::type& uGet<parameters::modules::drag>();
	template<> struct getUType<parameters::modules, parameters::modules::viscosity>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::viscosity>::type& uGet<parameters::modules::viscosity>();
	template<> struct getUType<parameters::modules, parameters::modules::tension>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::tension>::type& uGet<parameters::modules::tension>();
	template<> struct getUType<parameters::modules, parameters::modules::vorticity>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::vorticity>::type& uGet<parameters::modules::vorticity>();
	template<> struct getUType<parameters::modules, parameters::modules::movingBoundaries>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::movingBoundaries>::type& uGet<parameters::modules::movingBoundaries>();
	template<> struct getUType<parameters::modules, parameters::modules::debug>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::debug>::type& uGet<parameters::modules::debug>();
	template<> struct getUType<parameters::modules, parameters::modules::density>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::density>::type& uGet<parameters::modules::density>();
	template<> struct getUType<parameters::modules, parameters::modules::particleCleanUp>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::particleCleanUp>::type& uGet<parameters::modules::particleCleanUp>();
	template<> struct getUType<parameters::modules, parameters::modules::volumeInlets>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::volumeInlets>::type& uGet<parameters::modules::volumeInlets>();
	template<> struct getUType<parameters::modules, parameters::modules::volumeOutlets>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::volumeOutlets>::type& uGet<parameters::modules::volumeOutlets>();
	template<> struct getUType<parameters::modules, parameters::modules::logDump>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::logDump>::type& uGet<parameters::modules::logDump>();
	template<> struct getUType<parameters::modules, parameters::modules::neighborhood>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::neighborhood>::type& uGet<parameters::modules::neighborhood>();
	template<> struct getUType<parameters::modules, parameters::modules::neighborSorting>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::neighborSorting>::type& uGet<parameters::modules::neighborSorting>();
	template<> struct getUType<parameters::modules, parameters::modules::rayTracing>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::rayTracing>::type& uGet<parameters::modules::rayTracing>();
	template<> struct getUType<parameters::modules, parameters::modules::anisotropicSurface>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::anisotropicSurface>::type& uGet<parameters::modules::anisotropicSurface>();
	template<> struct getUType<parameters::modules, parameters::modules::renderMode>{using type = int32_t;};
	template<> typename getUType<parameters::modules,parameters::modules::renderMode>::type& uGet<parameters::modules::renderMode>();
	template<> struct getUType<parameters::modules, parameters::modules::resorting>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::resorting>::type& uGet<parameters::modules::resorting>();
	template<> struct getUType<parameters::modules, parameters::modules::hash_width>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::hash_width>::type& uGet<parameters::modules::hash_width>();
	template<> struct getUType<parameters::modules, parameters::modules::alembic>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::alembic>::type& uGet<parameters::modules::alembic>();
	template<> struct getUType<parameters::modules, parameters::modules::error_checking>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::error_checking>::type& uGet<parameters::modules::error_checking>();
	template<> struct getUType<parameters::modules, parameters::modules::gl_record>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::gl_record>::type& uGet<parameters::modules::gl_record>();
	template<> struct getUType<parameters::modules, parameters::modules::launch_cfg>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::launch_cfg>::type& uGet<parameters::modules::launch_cfg>();
	template<> struct getUType<parameters::modules, parameters::modules::regex_cfg>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::regex_cfg>::type& uGet<parameters::modules::regex_cfg>();
	template<> struct getUType<parameters::modules, parameters::modules::support>{using type = std::string;};
	template<> typename getUType<parameters::modules,parameters::modules::support>::type& uGet<parameters::modules::support>();
	template<> struct getUType<parameters::modules, parameters::modules::surfaceDistance>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::surfaceDistance>::type& uGet<parameters::modules::surfaceDistance>();
	template<> struct getUType<parameters::modules, parameters::modules::surfaceDetection>{using type = bool;};
	template<> typename getUType<parameters::modules,parameters::modules::surfaceDetection>::type& uGet<parameters::modules::surfaceDetection>();
	template<parameters::moving_plane ident> typename getUType<parameters::moving_plane, ident>::type& uGet();
	template<> struct getUType<parameters::moving_plane, parameters::moving_plane::plane>{using type = std::vector<movingPlane>;};
	template<> typename getUType<parameters::moving_plane,parameters::moving_plane::plane>::type& uGet<parameters::moving_plane::plane>();
	template<parameters::outlet_volumes ident> typename getUType<parameters::outlet_volumes, ident>::type& uGet();
	template<> struct getUType<parameters::outlet_volumes, parameters::outlet_volumes::volumeOutletCounter>{using type = int32_t;};
	template<> typename getUType<parameters::outlet_volumes,parameters::outlet_volumes::volumeOutletCounter>::type& uGet<parameters::outlet_volumes::volumeOutletCounter>();
	template<> struct getUType<parameters::outlet_volumes, parameters::outlet_volumes::volumeOutletTime>{using type = uFloat<SI::s>;};
	template<> typename getUType<parameters::outlet_volumes,parameters::outlet_volumes::volumeOutletTime>::type& uGet<parameters::outlet_volumes::volumeOutletTime>();
	template<> struct getUType<parameters::outlet_volumes, parameters::outlet_volumes::volume>{using type = std::vector<outletVolume>;};
	template<> typename getUType<parameters::outlet_volumes,parameters::outlet_volumes::volume>::type& uGet<parameters::outlet_volumes::volume>();
	template<parameters::particleSets ident> typename getUType<parameters::particleSets, ident>::type& uGet();
	template<> struct getUType<parameters::particleSets, parameters::particleSets::set>{using type = std::vector<std::string>;};
	template<> typename getUType<parameters::particleSets,parameters::particleSets::set>::type& uGet<parameters::particleSets::set>();
	template<parameters::particle_settings ident> typename getUType<parameters::particle_settings, ident>::type& uGet();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::monaghan_viscosity>{using type = uFloat<SI::velocity>;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::monaghan_viscosity>::type& uGet<parameters::particle_settings::monaghan_viscosity>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::boundaryViscosity>{using type = uFloat<SI::velocity>;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::boundaryViscosity>::type& uGet<parameters::particle_settings::boundaryViscosity>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::xsph_viscosity>{using type = float;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::xsph_viscosity>::type& uGet<parameters::particle_settings::xsph_viscosity>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::rigidAdhesion_akinci>{using type = uFloat<SI::acceleration>;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::rigidAdhesion_akinci>::type& uGet<parameters::particle_settings::rigidAdhesion_akinci>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::boundaryAdhesion_akinci>{using type = uFloat<SI::acceleration>;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::boundaryAdhesion_akinci>::type& uGet<parameters::particle_settings::boundaryAdhesion_akinci>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::tension_akinci>{using type = uFloat<SI::acceleration>;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::tension_akinci>::type& uGet<parameters::particle_settings::tension_akinci>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::air_velocity>{using type = uFloat4<SI::velocity>;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::air_velocity>::type& uGet<parameters::particle_settings::air_velocity>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::radius>{using type = uFloat<SI::m>;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::radius>::type& uGet<parameters::particle_settings::radius>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::first_fluid>{using type = int;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::first_fluid>::type& uGet<parameters::particle_settings::first_fluid>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::max_vel>{using type = float;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::max_vel>::type& uGet<parameters::particle_settings::max_vel>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::min_vel>{using type = float;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::min_vel>::type& uGet<parameters::particle_settings::min_vel>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::max_neighbors>{using type = int;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::max_neighbors>::type& uGet<parameters::particle_settings::max_neighbors>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::max_density>{using type = float;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::max_density>::type& uGet<parameters::particle_settings::max_density>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::sdf_resolution>{using type = int;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::sdf_resolution>::type& uGet<parameters::particle_settings::sdf_resolution>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::sdf_epsilon>{using type = float;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::sdf_epsilon>::type& uGet<parameters::particle_settings::sdf_epsilon>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::sdf_minpoint>{using type = float4;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::sdf_minpoint>::type& uGet<parameters::particle_settings::sdf_minpoint>();
	template<> struct getUType<parameters::particle_settings, parameters::particle_settings::rest_density>{using type = uFloat<SI::density>;};
	template<> typename getUType<parameters::particle_settings,parameters::particle_settings::rest_density>::type& uGet<parameters::particle_settings::rest_density>();
	template<parameters::particle_volumes ident> typename getUType<parameters::particle_volumes, ident>::type& uGet();
	template<> struct getUType<parameters::particle_volumes, parameters::particle_volumes::volume>{using type = std::vector<particleVolume>;};
	template<> typename getUType<parameters::particle_volumes,parameters::particle_volumes::volume>::type& uGet<parameters::particle_volumes::volume>();
	template<parameters::render_settings ident> typename getUType<parameters::render_settings, ident>::type& uGet();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::maxAnisotropicSupport>{using type = float4;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::maxAnisotropicSupport>::type& uGet<parameters::render_settings::maxAnisotropicSupport>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::apertureRadius>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::apertureRadius>::type& uGet<parameters::render_settings::apertureRadius>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::anisotropicLambda>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::anisotropicLambda>::type& uGet<parameters::render_settings::anisotropicLambda>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::anisotropicNepsilon>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::anisotropicNepsilon>::type& uGet<parameters::render_settings::anisotropicNepsilon>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::anisotropicKs>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::anisotropicKs>::type& uGet<parameters::render_settings::anisotropicKs>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::anisotropicKr>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::anisotropicKr>::type& uGet<parameters::render_settings::anisotropicKr>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::anisotropicKn>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::anisotropicKn>::type& uGet<parameters::render_settings::anisotropicKn>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::focalDistance>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::focalDistance>::type& uGet<parameters::render_settings::focalDistance>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxNeighborLimit>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxNeighborLimit>::type& uGet<parameters::render_settings::vrtxNeighborLimit>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxFluidBias>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxFluidBias>::type& uGet<parameters::render_settings::vrtxFluidBias>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxRenderDomainMin>{using type = float3;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxRenderDomainMin>::type& uGet<parameters::render_settings::vrtxRenderDomainMin>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxRenderDomainMax>{using type = float3;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxRenderDomainMax>::type& uGet<parameters::render_settings::vrtxRenderDomainMax>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxFlipCameraUp>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxFlipCameraUp>::type& uGet<parameters::render_settings::vrtxFlipCameraUp>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxSurfaceExtraction>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxSurfaceExtraction>::type& uGet<parameters::render_settings::vrtxSurfaceExtraction>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxRenderMode>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxRenderMode>::type& uGet<parameters::render_settings::vrtxRenderMode>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxRenderGrid>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxRenderGrid>::type& uGet<parameters::render_settings::vrtxRenderGrid>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxRenderFluid>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxRenderFluid>::type& uGet<parameters::render_settings::vrtxRenderFluid>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxRenderSurface>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxRenderSurface>::type& uGet<parameters::render_settings::vrtxRenderSurface>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxDisplayStats>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxDisplayStats>::type& uGet<parameters::render_settings::vrtxDisplayStats>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxRenderBVH>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxRenderBVH>::type& uGet<parameters::render_settings::vrtxRenderBVH>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxBVHMaterial>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxBVHMaterial>::type& uGet<parameters::render_settings::vrtxBVHMaterial>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxRenderNormals>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxRenderNormals>::type& uGet<parameters::render_settings::vrtxRenderNormals>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxMaterial>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxMaterial>::type& uGet<parameters::render_settings::vrtxMaterial>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxDomainEpsilon>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxDomainEpsilon>::type& uGet<parameters::render_settings::vrtxDomainEpsilon>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxDomainMin>{using type = float3;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxDomainMin>::type& uGet<parameters::render_settings::vrtxDomainMin>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxDomainMax>{using type = float3;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxDomainMax>::type& uGet<parameters::render_settings::vrtxDomainMax>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxDebeerScale>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxDebeerScale>::type& uGet<parameters::render_settings::vrtxDebeerScale>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxDebeer>{using type = float3;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxDebeer>::type& uGet<parameters::render_settings::vrtxDebeer>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::bvhColor>{using type = float3;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::bvhColor>::type& uGet<parameters::render_settings::bvhColor>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxFluidColor>{using type = float3;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxFluidColor>::type& uGet<parameters::render_settings::vrtxFluidColor>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxDepth>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxDepth>::type& uGet<parameters::render_settings::vrtxDepth>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxDepthScale>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxDepthScale>::type& uGet<parameters::render_settings::vrtxDepthScale>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxWMin>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxWMin>::type& uGet<parameters::render_settings::vrtxWMin>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxR>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxR>::type& uGet<parameters::render_settings::vrtxR>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::camera_fov>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::camera_fov>::type& uGet<parameters::render_settings::camera_fov>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxWMax>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxWMax>::type& uGet<parameters::render_settings::vrtxWMax>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxBounces>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxBounces>::type& uGet<parameters::render_settings::vrtxBounces>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::auxScale>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::auxScale>::type& uGet<parameters::render_settings::auxScale>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::vrtxIOR>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::vrtxIOR>::type& uGet<parameters::render_settings::vrtxIOR>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::renderSteps>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::renderSteps>::type& uGet<parameters::render_settings::renderSteps>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::internalLimit>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::internalLimit>::type& uGet<parameters::render_settings::internalLimit>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::auxCellCount>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::auxCellCount>::type& uGet<parameters::render_settings::auxCellCount>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::axesRender>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::axesRender>::type& uGet<parameters::render_settings::axesRender>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::boundsRender>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::boundsRender>::type& uGet<parameters::render_settings::boundsRender>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::floorRender>{using type = int32_t;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::floorRender>::type& uGet<parameters::render_settings::floorRender>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::axesScale>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::axesScale>::type& uGet<parameters::render_settings::axesScale>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::render_clamp>{using type = float3;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::render_clamp>::type& uGet<parameters::render_settings::render_clamp>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::camera_position>{using type = uFloat3<SI::m>;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::camera_position>::type& uGet<parameters::render_settings::camera_position>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::camera_angle>{using type = float3;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::camera_angle>::type& uGet<parameters::render_settings::camera_angle>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::camera_resolution>{using type = float2;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::camera_resolution>::type& uGet<parameters::render_settings::camera_resolution>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::camera_fps>{using type = float;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::camera_fps>::type& uGet<parameters::render_settings::camera_fps>();
	template<> struct getUType<parameters::render_settings, parameters::render_settings::gl_file>{using type = std::string;};
	template<> typename getUType<parameters::render_settings,parameters::render_settings::gl_file>::type& uGet<parameters::render_settings::gl_file>();
	template<parameters::resort ident> typename getUType<parameters::resort, ident>::type& uGet();
	template<> struct getUType<parameters::resort, parameters::resort::auxCells>{using type = int;};
	template<> typename getUType<parameters::resort,parameters::resort::auxCells>::type& uGet<parameters::resort::auxCells>();
	template<> struct getUType<parameters::resort, parameters::resort::auxCollisions>{using type = int;};
	template<> typename getUType<parameters::resort,parameters::resort::auxCollisions>::type& uGet<parameters::resort::auxCollisions>();
	template<> struct getUType<parameters::resort, parameters::resort::resort_algorithm>{using type = int;};
	template<> typename getUType<parameters::resort,parameters::resort::resort_algorithm>::type& uGet<parameters::resort::resort_algorithm>();
	template<> struct getUType<parameters::resort, parameters::resort::valid_cells>{using type = int;};
	template<> typename getUType<parameters::resort,parameters::resort::valid_cells>::type& uGet<parameters::resort::valid_cells>();
	template<> struct getUType<parameters::resort, parameters::resort::zOrderScale>{using type = float;};
	template<> typename getUType<parameters::resort,parameters::resort::zOrderScale>::type& uGet<parameters::resort::zOrderScale>();
	template<> struct getUType<parameters::resort, parameters::resort::collision_cells>{using type = int;};
	template<> typename getUType<parameters::resort,parameters::resort::collision_cells>::type& uGet<parameters::resort::collision_cells>();
	template<> struct getUType<parameters::resort, parameters::resort::occupiedCells>{using type = std::vector<int32_t>;};
	template<> typename getUType<parameters::resort,parameters::resort::occupiedCells>::type& uGet<parameters::resort::occupiedCells>();
	template<parameters::rigid_volumes ident> typename getUType<parameters::rigid_volumes, ident>::type& uGet();
	template<> struct getUType<parameters::rigid_volumes, parameters::rigid_volumes::mesh_resolution>{using type = int;};
	template<> typename getUType<parameters::rigid_volumes,parameters::rigid_volumes::mesh_resolution>::type& uGet<parameters::rigid_volumes::mesh_resolution>();
	template<> struct getUType<parameters::rigid_volumes, parameters::rigid_volumes::gamma>{using type = float;};
	template<> typename getUType<parameters::rigid_volumes,parameters::rigid_volumes::gamma>::type& uGet<parameters::rigid_volumes::gamma>();
	template<> struct getUType<parameters::rigid_volumes, parameters::rigid_volumes::beta>{using type = float;};
	template<> typename getUType<parameters::rigid_volumes,parameters::rigid_volumes::beta>::type& uGet<parameters::rigid_volumes::beta>();
	template<> struct getUType<parameters::rigid_volumes, parameters::rigid_volumes::volume>{using type = std::vector<rigidVolume>;};
	template<> typename getUType<parameters::rigid_volumes,parameters::rigid_volumes::volume>::type& uGet<parameters::rigid_volumes::volume>();
	template<parameters::rtxScene ident> typename getUType<parameters::rtxScene, ident>::type& uGet();
	template<> struct getUType<parameters::rtxScene, parameters::rtxScene::sphere>{using type = std::vector<rtxSphere>;};
	template<> typename getUType<parameters::rtxScene,parameters::rtxScene::sphere>::type& uGet<parameters::rtxScene::sphere>();
	template<> struct getUType<parameters::rtxScene, parameters::rtxScene::box>{using type = std::vector<rtxBox>;};
	template<> typename getUType<parameters::rtxScene,parameters::rtxScene::box>::type& uGet<parameters::rtxScene::box>();
	template<parameters::simulation_settings ident> typename getUType<parameters::simulation_settings, ident>::type& uGet();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::external_force>{using type = uFloat4<SI::acceleration>;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::external_force>::type& uGet<parameters::simulation_settings::external_force>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::timestep_min>{using type = uFloat<SI::s>;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::timestep_min>::type& uGet<parameters::simulation_settings::timestep_min>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::timestep_max>{using type = uFloat<SI::s>;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::timestep_max>::type& uGet<parameters::simulation_settings::timestep_max>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::boundaryDampening>{using type = float;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::boundaryDampening>::type& uGet<parameters::simulation_settings::boundaryDampening>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::LUTOffset>{using type = float;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::LUTOffset>::type& uGet<parameters::simulation_settings::LUTOffset>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::boundaryObject>{using type = std::string;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::boundaryObject>::type& uGet<parameters::simulation_settings::boundaryObject>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::domainWalls>{using type = std::string;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::domainWalls>::type& uGet<parameters::simulation_settings::domainWalls>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::neighborlimit>{using type = int32_t;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::neighborlimit>::type& uGet<parameters::simulation_settings::neighborlimit>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::dumpFile>{using type = std::string;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::dumpFile>::type& uGet<parameters::simulation_settings::dumpFile>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::maxNumptcls>{using type = int32_t;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::maxNumptcls>::type& uGet<parameters::simulation_settings::maxNumptcls>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::hash_entries>{using type = uint32_t;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::hash_entries>::type& uGet<parameters::simulation_settings::hash_entries>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::mlm_schemes>{using type = uint32_t;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::mlm_schemes>::type& uGet<parameters::simulation_settings::mlm_schemes>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::deviceRegex>{using type = std::string;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::deviceRegex>::type& uGet<parameters::simulation_settings::deviceRegex>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::hostRegex>{using type = std::string;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::hostRegex>::type& uGet<parameters::simulation_settings::hostRegex>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::debugRegex>{using type = std::string;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::debugRegex>::type& uGet<parameters::simulation_settings::debugRegex>();
	template<> struct getUType<parameters::simulation_settings, parameters::simulation_settings::densitySteps>{using type = int32_t;};
	template<> typename getUType<parameters::simulation_settings,parameters::simulation_settings::densitySteps>::type& uGet<parameters::simulation_settings::densitySteps>();
	template<parameters::support ident> typename getUType<parameters::support, ident>::type& uGet();
	template<> struct getUType<parameters::support, parameters::support::support_current_iteration>{using type = uint32_t;};
	template<> typename getUType<parameters::support,parameters::support::support_current_iteration>::type& uGet<parameters::support::support_current_iteration>();
	template<> struct getUType<parameters::support, parameters::support::adjusted_particles>{using type = int32_t;};
	template<> typename getUType<parameters::support,parameters::support::adjusted_particles>::type& uGet<parameters::support::adjusted_particles>();
	template<> struct getUType<parameters::support, parameters::support::omega>{using type = float;};
	template<> typename getUType<parameters::support,parameters::support::omega>::type& uGet<parameters::support::omega>();
	template<> struct getUType<parameters::support, parameters::support::target_neighbors>{using type = int32_t;};
	template<> typename getUType<parameters::support,parameters::support::target_neighbors>::type& uGet<parameters::support::target_neighbors>();
	template<> struct getUType<parameters::support, parameters::support::support_leeway>{using type = int32_t;};
	template<> typename getUType<parameters::support,parameters::support::support_leeway>::type& uGet<parameters::support::support_leeway>();
	template<> struct getUType<parameters::support, parameters::support::overhead_size>{using type = int32_t;};
	template<> typename getUType<parameters::support,parameters::support::overhead_size>::type& uGet<parameters::support::overhead_size>();
	template<> struct getUType<parameters::support, parameters::support::error_factor>{using type = int32_t;};
	template<> typename getUType<parameters::support,parameters::support::error_factor>::type& uGet<parameters::support::error_factor>();
	template<parameters::surfaceDistance ident> typename getUType<parameters::surfaceDistance, ident>::type& uGet();
	template<> struct getUType<parameters::surfaceDistance, parameters::surfaceDistance::surface_levelLimit>{using type = uFloat<SI::m>;};
	template<> typename getUType<parameters::surfaceDistance,parameters::surfaceDistance::surface_levelLimit>::type& uGet<parameters::surfaceDistance::surface_levelLimit>();
	template<> struct getUType<parameters::surfaceDistance, parameters::surfaceDistance::surface_neighborLimit>{using type = int32_t;};
	template<> typename getUType<parameters::surfaceDistance,parameters::surfaceDistance::surface_neighborLimit>::type& uGet<parameters::surfaceDistance::surface_neighborLimit>();
	template<> struct getUType<parameters::surfaceDistance, parameters::surfaceDistance::surface_phiMin>{using type = uFloat<SI::m>;};
	template<> typename getUType<parameters::surfaceDistance,parameters::surfaceDistance::surface_phiMin>::type& uGet<parameters::surfaceDistance::surface_phiMin>();
	template<> struct getUType<parameters::surfaceDistance, parameters::surfaceDistance::surface_phiChange>{using type = float;};
	template<> typename getUType<parameters::surfaceDistance,parameters::surfaceDistance::surface_phiChange>::type& uGet<parameters::surfaceDistance::surface_phiChange>();
	template<> struct getUType<parameters::surfaceDistance, parameters::surfaceDistance::surface_distanceFieldDistances>{using type = uFloat3<SI::m>;};
	template<> typename getUType<parameters::surfaceDistance,parameters::surfaceDistance::surface_distanceFieldDistances>::type& uGet<parameters::surfaceDistance::surface_distanceFieldDistances>();
	template<> struct getUType<parameters::surfaceDistance, parameters::surfaceDistance::surface_iterations>{using type = int32_t;};
	template<> typename getUType<parameters::surfaceDistance,parameters::surfaceDistance::surface_iterations>::type& uGet<parameters::surfaceDistance::surface_iterations>();
	template<parameters::vorticitySettings ident> typename getUType<parameters::vorticitySettings, ident>::type& uGet();
	template<> struct getUType<parameters::vorticitySettings, parameters::vorticitySettings::intertiaInverse>{using type = float;};
	template<> typename getUType<parameters::vorticitySettings,parameters::vorticitySettings::intertiaInverse>::type& uGet<parameters::vorticitySettings::intertiaInverse>();
	template<> struct getUType<parameters::vorticitySettings, parameters::vorticitySettings::viscosityOmega>{using type = float;};
	template<> typename getUType<parameters::vorticitySettings,parameters::vorticitySettings::viscosityOmega>::type& uGet<parameters::vorticitySettings::viscosityOmega>();
	template<> struct getUType<parameters::vorticitySettings, parameters::vorticitySettings::vorticityCoeff>{using type = float;};
	template<> typename getUType<parameters::vorticitySettings,parameters::vorticitySettings::vorticityCoeff>::type& uGet<parameters::vorticitySettings::vorticityCoeff>();

namespace parameters{ 
	template<typename Func, typename... Ts>
	void iterateParameters(Func&& fn, Ts&&... args){
		fn(get<adaptive::adaptivityScaling>(), "adaptive.adaptivityScaling", args...);
		fn(get<adaptive::adaptivityThreshold>(), "adaptive.adaptivityThreshold", args...);
		fn(get<adaptive::adaptivityGamma>(), "adaptive.adaptivityGamma", args...);
		fn(get<adaptive::resolution>(), "adaptive.resolution", args...);
		fn(get<adaptive::useVolume>(), "adaptive.useVolume", args...);
		fn(get<adaptive::minVolume>(), "adaptive.minVolume", args...);
		fn(get<adaptive::detailedAdaptiveStatistics>(), "adaptive.detailedAdaptiveStatistics", args...);
		fn(get<adaptive::ratio>(), "adaptive.ratio", args...);
		fn(get<adaptive::blendSteps>(), "adaptive.blendSteps", args...);
		fn(get<adaptive::delay>(), "adaptive.delay", args...);
		fn(get<adaptive::splitPtcls>(), "adaptive.splitPtcls", args...);
		fn(get<adaptive::blendedPtcls>(), "adaptive.blendedPtcls", args...);
		fn(get<adaptive::mergedPtcls>(), "adaptive.mergedPtcls", args...);
		fn(get<adaptive::sharedPtcls>(), "adaptive.sharedPtcls", args...);
		fn(get<alembic::file_name>(), "alembic.file_name", args...);
		fn(get<alembic::fps>(), "alembic.fps", args...);
		fn(get<boundary_volumes::volumeBoundaryCounter>(), "boundary_volumes.volumeBoundaryCounter", args...);
		fn(get<boundary_volumes::volume>(), "boundary_volumes.volume", args...);
		fn(get<color_map::transfer_mode>(), "color_map.transfer_mode", args...);
		fn(get<color_map::mapping_mode>(), "color_map.mapping_mode", args...);
		fn(get<color_map::vectorMode>(), "color_map.vectorMode", args...);
		fn(get<color_map::visualizeDirection>(), "color_map.visualizeDirection", args...);
		fn(get<color_map::vectorScale>(), "color_map.vectorScale", args...);
		fn(get<color_map::vectorScaling>(), "color_map.vectorScaling", args...);
		fn(get<color_map::min>(), "color_map.min", args...);
		fn(get<color_map::max>(), "color_map.max", args...);
		fn(get<color_map::transfer_fn>(), "color_map.transfer_fn", args...);
		fn(get<color_map::pruneVoxel>(), "color_map.pruneVoxel", args...);
		fn(get<color_map::mapping_fn>(), "color_map.mapping_fn", args...);
		fn(get<color_map::autoScaling>(), "color_map.autoScaling", args...);
		fn(get<color_map::map_flipped>(), "color_map.map_flipped", args...);
		fn(get<color_map::buffer>(), "color_map.buffer", args...);
		fn(get<color_map::map>(), "color_map.map", args...);
		fn(get<dfsph_settings::densityError>(), "dfsph_settings.densityError", args...);
		fn(get<dfsph_settings::divergenceError>(), "dfsph_settings.divergenceError", args...);
		fn(get<dfsph_settings::densitySolverIterations>(), "dfsph_settings.densitySolverIterations", args...);
		fn(get<dfsph_settings::divergenceSolverIterations>(), "dfsph_settings.divergenceSolverIterations", args...);
		fn(get<dfsph_settings::densityEta>(), "dfsph_settings.densityEta", args...);
		fn(get<dfsph_settings::divergenceEta>(), "dfsph_settings.divergenceEta", args...);
		fn(get<iisph_settings::density_error>(), "iisph_settings.density_error", args...);
		fn(get<iisph_settings::iterations>(), "iisph_settings.iterations", args...);
		fn(get<iisph_settings::eta>(), "iisph_settings.eta", args...);
		fn(get<iisph_settings::jacobi_omega>(), "iisph_settings.jacobi_omega", args...);
		fn(get<inlet_volumes::volume>(), "inlet_volumes.volume", args...);
		fn(get<internal::neighborhood_kind>(), "internal.neighborhood_kind", args...);
		fn(get<internal::dumpNextframe>(), "internal.dumpNextframe", args...);
		fn(get<internal::dumpForSSSPH>(), "internal.dumpForSSSPH", args...);
		fn(get<internal::target>(), "internal.target", args...);
		fn(get<internal::hash_size>(), "internal.hash_size", args...);
		fn(get<internal::cell_ordering>(), "internal.cell_ordering", args...);
		fn(get<internal::cell_structure>(), "internal.cell_structure", args...);
		fn(get<internal::num_ptcls>(), "internal.num_ptcls", args...);
		fn(get<internal::num_ptcls_fluid>(), "internal.num_ptcls_fluid", args...);
		fn(get<internal::folderName>(), "internal.folderName", args...);
		fn(get<internal::boundaryCounter>(), "internal.boundaryCounter", args...);
		fn(get<internal::boundaryLUTSize>(), "internal.boundaryLUTSize", args...);
		fn(get<internal::frame>(), "internal.frame", args...);
		fn(get<internal::max_velocity>(), "internal.max_velocity", args...);
		fn(get<internal::min_domain>(), "internal.min_domain", args...);
		fn(get<internal::max_domain>(), "internal.max_domain", args...);
		fn(get<internal::min_coord>(), "internal.min_coord", args...);
		fn(get<internal::max_coord>(), "internal.max_coord", args...);
		fn(get<internal::cell_size>(), "internal.cell_size", args...);
		fn(get<internal::gridSize>(), "internal.gridSize", args...);
		fn(get<internal::ptcl_spacing>(), "internal.ptcl_spacing", args...);
		fn(get<internal::ptcl_support>(), "internal.ptcl_support", args...);
		fn(get<internal::config_file>(), "internal.config_file", args...);
		fn(get<internal::config_folder>(), "internal.config_folder", args...);
		fn(get<internal::working_directory>(), "internal.working_directory", args...);
		fn(get<internal::build_directory>(), "internal.build_directory", args...);
		fn(get<internal::source_directory>(), "internal.source_directory", args...);
		fn(get<internal::binary_directory>(), "internal.binary_directory", args...);
		fn(get<internal::timestep>(), "internal.timestep", args...);
		fn(get<internal::simulationTime>(), "internal.simulationTime", args...);
		fn(get<modules::adaptive>(), "modules.adaptive", args...);
		fn(get<modules::pressure>(), "modules.pressure", args...);
		fn(get<modules::volumeBoundary>(), "modules.volumeBoundary", args...);
		fn(get<modules::xsph>(), "modules.xsph", args...);
		fn(get<modules::drag>(), "modules.drag", args...);
		fn(get<modules::viscosity>(), "modules.viscosity", args...);
		fn(get<modules::tension>(), "modules.tension", args...);
		fn(get<modules::vorticity>(), "modules.vorticity", args...);
		fn(get<modules::movingBoundaries>(), "modules.movingBoundaries", args...);
		fn(get<modules::debug>(), "modules.debug", args...);
		fn(get<modules::density>(), "modules.density", args...);
		fn(get<modules::particleCleanUp>(), "modules.particleCleanUp", args...);
		fn(get<modules::volumeInlets>(), "modules.volumeInlets", args...);
		fn(get<modules::volumeOutlets>(), "modules.volumeOutlets", args...);
		fn(get<modules::logDump>(), "modules.logDump", args...);
		fn(get<modules::neighborhood>(), "modules.neighborhood", args...);
		fn(get<modules::neighborSorting>(), "modules.neighborSorting", args...);
		fn(get<modules::rayTracing>(), "modules.rayTracing", args...);
		fn(get<modules::anisotropicSurface>(), "modules.anisotropicSurface", args...);
		fn(get<modules::renderMode>(), "modules.renderMode", args...);
		fn(get<modules::resorting>(), "modules.resorting", args...);
		fn(get<modules::hash_width>(), "modules.hash_width", args...);
		fn(get<modules::alembic>(), "modules.alembic", args...);
		fn(get<modules::error_checking>(), "modules.error_checking", args...);
		fn(get<modules::gl_record>(), "modules.gl_record", args...);
		fn(get<modules::launch_cfg>(), "modules.launch_cfg", args...);
		fn(get<modules::regex_cfg>(), "modules.regex_cfg", args...);
		fn(get<modules::support>(), "modules.support", args...);
		fn(get<modules::surfaceDistance>(), "modules.surfaceDistance", args...);
		fn(get<modules::surfaceDetection>(), "modules.surfaceDetection", args...);
		fn(get<moving_plane::plane>(), "moving_plane.plane", args...);
		fn(get<outlet_volumes::volumeOutletCounter>(), "outlet_volumes.volumeOutletCounter", args...);
		fn(get<outlet_volumes::volumeOutletTime>(), "outlet_volumes.volumeOutletTime", args...);
		fn(get<outlet_volumes::volume>(), "outlet_volumes.volume", args...);
		fn(get<particleSets::set>(), "particleSets.set", args...);
		fn(get<particle_settings::monaghan_viscosity>(), "particle_settings.monaghan_viscosity", args...);
		fn(get<particle_settings::boundaryViscosity>(), "particle_settings.boundaryViscosity", args...);
		fn(get<particle_settings::xsph_viscosity>(), "particle_settings.xsph_viscosity", args...);
		fn(get<particle_settings::rigidAdhesion_akinci>(), "particle_settings.rigidAdhesion_akinci", args...);
		fn(get<particle_settings::boundaryAdhesion_akinci>(), "particle_settings.boundaryAdhesion_akinci", args...);
		fn(get<particle_settings::tension_akinci>(), "particle_settings.tension_akinci", args...);
		fn(get<particle_settings::air_velocity>(), "particle_settings.air_velocity", args...);
		fn(get<particle_settings::radius>(), "particle_settings.radius", args...);
		fn(get<particle_settings::first_fluid>(), "particle_settings.first_fluid", args...);
		fn(get<particle_settings::max_vel>(), "particle_settings.max_vel", args...);
		fn(get<particle_settings::min_vel>(), "particle_settings.min_vel", args...);
		fn(get<particle_settings::max_neighbors>(), "particle_settings.max_neighbors", args...);
		fn(get<particle_settings::max_density>(), "particle_settings.max_density", args...);
		fn(get<particle_settings::sdf_resolution>(), "particle_settings.sdf_resolution", args...);
		fn(get<particle_settings::sdf_epsilon>(), "particle_settings.sdf_epsilon", args...);
		fn(get<particle_settings::sdf_minpoint>(), "particle_settings.sdf_minpoint", args...);
		fn(get<particle_settings::rest_density>(), "particle_settings.rest_density", args...);
		fn(get<particle_volumes::volume>(), "particle_volumes.volume", args...);
		fn(get<render_settings::maxAnisotropicSupport>(), "render_settings.maxAnisotropicSupport", args...);
		fn(get<render_settings::apertureRadius>(), "render_settings.apertureRadius", args...);
		fn(get<render_settings::anisotropicLambda>(), "render_settings.anisotropicLambda", args...);
		fn(get<render_settings::anisotropicNepsilon>(), "render_settings.anisotropicNepsilon", args...);
		fn(get<render_settings::anisotropicKs>(), "render_settings.anisotropicKs", args...);
		fn(get<render_settings::anisotropicKr>(), "render_settings.anisotropicKr", args...);
		fn(get<render_settings::anisotropicKn>(), "render_settings.anisotropicKn", args...);
		fn(get<render_settings::focalDistance>(), "render_settings.focalDistance", args...);
		fn(get<render_settings::vrtxNeighborLimit>(), "render_settings.vrtxNeighborLimit", args...);
		fn(get<render_settings::vrtxFluidBias>(), "render_settings.vrtxFluidBias", args...);
		fn(get<render_settings::vrtxRenderDomainMin>(), "render_settings.vrtxRenderDomainMin", args...);
		fn(get<render_settings::vrtxRenderDomainMax>(), "render_settings.vrtxRenderDomainMax", args...);
		fn(get<render_settings::vrtxFlipCameraUp>(), "render_settings.vrtxFlipCameraUp", args...);
		fn(get<render_settings::vrtxSurfaceExtraction>(), "render_settings.vrtxSurfaceExtraction", args...);
		fn(get<render_settings::vrtxRenderMode>(), "render_settings.vrtxRenderMode", args...);
		fn(get<render_settings::vrtxRenderGrid>(), "render_settings.vrtxRenderGrid", args...);
		fn(get<render_settings::vrtxRenderFluid>(), "render_settings.vrtxRenderFluid", args...);
		fn(get<render_settings::vrtxRenderSurface>(), "render_settings.vrtxRenderSurface", args...);
		fn(get<render_settings::vrtxDisplayStats>(), "render_settings.vrtxDisplayStats", args...);
		fn(get<render_settings::vrtxRenderBVH>(), "render_settings.vrtxRenderBVH", args...);
		fn(get<render_settings::vrtxBVHMaterial>(), "render_settings.vrtxBVHMaterial", args...);
		fn(get<render_settings::vrtxRenderNormals>(), "render_settings.vrtxRenderNormals", args...);
		fn(get<render_settings::vrtxMaterial>(), "render_settings.vrtxMaterial", args...);
		fn(get<render_settings::vrtxDomainEpsilon>(), "render_settings.vrtxDomainEpsilon", args...);
		fn(get<render_settings::vrtxDomainMin>(), "render_settings.vrtxDomainMin", args...);
		fn(get<render_settings::vrtxDomainMax>(), "render_settings.vrtxDomainMax", args...);
		fn(get<render_settings::vrtxDebeerScale>(), "render_settings.vrtxDebeerScale", args...);
		fn(get<render_settings::vrtxDebeer>(), "render_settings.vrtxDebeer", args...);
		fn(get<render_settings::bvhColor>(), "render_settings.bvhColor", args...);
		fn(get<render_settings::vrtxFluidColor>(), "render_settings.vrtxFluidColor", args...);
		fn(get<render_settings::vrtxDepth>(), "render_settings.vrtxDepth", args...);
		fn(get<render_settings::vrtxDepthScale>(), "render_settings.vrtxDepthScale", args...);
		fn(get<render_settings::vrtxWMin>(), "render_settings.vrtxWMin", args...);
		fn(get<render_settings::vrtxR>(), "render_settings.vrtxR", args...);
		fn(get<render_settings::camera_fov>(), "render_settings.camera_fov", args...);
		fn(get<render_settings::vrtxWMax>(), "render_settings.vrtxWMax", args...);
		fn(get<render_settings::vrtxBounces>(), "render_settings.vrtxBounces", args...);
		fn(get<render_settings::auxScale>(), "render_settings.auxScale", args...);
		fn(get<render_settings::vrtxIOR>(), "render_settings.vrtxIOR", args...);
		fn(get<render_settings::renderSteps>(), "render_settings.renderSteps", args...);
		fn(get<render_settings::internalLimit>(), "render_settings.internalLimit", args...);
		fn(get<render_settings::auxCellCount>(), "render_settings.auxCellCount", args...);
		fn(get<render_settings::axesRender>(), "render_settings.axesRender", args...);
		fn(get<render_settings::boundsRender>(), "render_settings.boundsRender", args...);
		fn(get<render_settings::floorRender>(), "render_settings.floorRender", args...);
		fn(get<render_settings::axesScale>(), "render_settings.axesScale", args...);
		fn(get<render_settings::render_clamp>(), "render_settings.render_clamp", args...);
		fn(get<render_settings::camera_position>(), "render_settings.camera_position", args...);
		fn(get<render_settings::camera_angle>(), "render_settings.camera_angle", args...);
		fn(get<render_settings::camera_resolution>(), "render_settings.camera_resolution", args...);
		fn(get<render_settings::camera_fps>(), "render_settings.camera_fps", args...);
		fn(get<render_settings::gl_file>(), "render_settings.gl_file", args...);
		fn(get<resort::auxCells>(), "resort.auxCells", args...);
		fn(get<resort::auxCollisions>(), "resort.auxCollisions", args...);
		fn(get<resort::resort_algorithm>(), "resort.resort_algorithm", args...);
		fn(get<resort::valid_cells>(), "resort.valid_cells", args...);
		fn(get<resort::zOrderScale>(), "resort.zOrderScale", args...);
		fn(get<resort::collision_cells>(), "resort.collision_cells", args...);
		fn(get<resort::occupiedCells>(), "resort.occupiedCells", args...);
		fn(get<rigid_volumes::mesh_resolution>(), "rigid_volumes.mesh_resolution", args...);
		fn(get<rigid_volumes::gamma>(), "rigid_volumes.gamma", args...);
		fn(get<rigid_volumes::beta>(), "rigid_volumes.beta", args...);
		fn(get<rigid_volumes::volume>(), "rigid_volumes.volume", args...);
		fn(get<rtxScene::sphere>(), "rtxScene.sphere", args...);
		fn(get<rtxScene::box>(), "rtxScene.box", args...);
		fn(get<simulation_settings::external_force>(), "simulation_settings.external_force", args...);
		fn(get<simulation_settings::timestep_min>(), "simulation_settings.timestep_min", args...);
		fn(get<simulation_settings::timestep_max>(), "simulation_settings.timestep_max", args...);
		fn(get<simulation_settings::boundaryDampening>(), "simulation_settings.boundaryDampening", args...);
		fn(get<simulation_settings::LUTOffset>(), "simulation_settings.LUTOffset", args...);
		fn(get<simulation_settings::boundaryObject>(), "simulation_settings.boundaryObject", args...);
		fn(get<simulation_settings::domainWalls>(), "simulation_settings.domainWalls", args...);
		fn(get<simulation_settings::neighborlimit>(), "simulation_settings.neighborlimit", args...);
		fn(get<simulation_settings::dumpFile>(), "simulation_settings.dumpFile", args...);
		fn(get<simulation_settings::maxNumptcls>(), "simulation_settings.maxNumptcls", args...);
		fn(get<simulation_settings::hash_entries>(), "simulation_settings.hash_entries", args...);
		fn(get<simulation_settings::mlm_schemes>(), "simulation_settings.mlm_schemes", args...);
		fn(get<simulation_settings::deviceRegex>(), "simulation_settings.deviceRegex", args...);
		fn(get<simulation_settings::hostRegex>(), "simulation_settings.hostRegex", args...);
		fn(get<simulation_settings::debugRegex>(), "simulation_settings.debugRegex", args...);
		fn(get<simulation_settings::densitySteps>(), "simulation_settings.densitySteps", args...);
		fn(get<support::support_current_iteration>(), "support.support_current_iteration", args...);
		fn(get<support::adjusted_particles>(), "support.adjusted_particles", args...);
		fn(get<support::omega>(), "support.omega", args...);
		fn(get<support::target_neighbors>(), "support.target_neighbors", args...);
		fn(get<support::support_leeway>(), "support.support_leeway", args...);
		fn(get<support::overhead_size>(), "support.overhead_size", args...);
		fn(get<support::error_factor>(), "support.error_factor", args...);
		fn(get<surfaceDistance::surface_levelLimit>(), "surfaceDistance.surface_levelLimit", args...);
		fn(get<surfaceDistance::surface_neighborLimit>(), "surfaceDistance.surface_neighborLimit", args...);
		fn(get<surfaceDistance::surface_phiMin>(), "surfaceDistance.surface_phiMin", args...);
		fn(get<surfaceDistance::surface_phiChange>(), "surfaceDistance.surface_phiChange", args...);
		fn(get<surfaceDistance::surface_distanceFieldDistances>(), "surfaceDistance.surface_distanceFieldDistances", args...);
		fn(get<surfaceDistance::surface_iterations>(), "surfaceDistance.surface_iterations", args...);
		fn(get<vorticitySettings::intertiaInverse>(), "vorticitySettings.intertiaInverse", args...);
		fn(get<vorticitySettings::viscosityOmega>(), "vorticitySettings.viscosityOmega", args...);
		fn(get<vorticitySettings::vorticityCoeff>(), "vorticitySettings.vorticityCoeff", args...);
	}
	template<typename Func, typename... Ts>
	void iterateParametersU(Func&& fn, Ts&&... args){
		fn(uGet<adaptive::adaptivityScaling>(), "adaptive.adaptivityScaling", args...);
		fn(uGet<adaptive::adaptivityThreshold>(), "adaptive.adaptivityThreshold", args...);
		fn(uGet<adaptive::adaptivityGamma>(), "adaptive.adaptivityGamma", args...);
		fn(uGet<adaptive::resolution>(), "adaptive.resolution", args...);
		fn(uGet<adaptive::useVolume>(), "adaptive.useVolume", args...);
		fn(uGet<adaptive::minVolume>(), "adaptive.minVolume", args...);
		fn(uGet<adaptive::detailedAdaptiveStatistics>(), "adaptive.detailedAdaptiveStatistics", args...);
		fn(uGet<adaptive::ratio>(), "adaptive.ratio", args...);
		fn(uGet<adaptive::blendSteps>(), "adaptive.blendSteps", args...);
		fn(uGet<adaptive::delay>(), "adaptive.delay", args...);
		fn(uGet<adaptive::splitPtcls>(), "adaptive.splitPtcls", args...);
		fn(uGet<adaptive::blendedPtcls>(), "adaptive.blendedPtcls", args...);
		fn(uGet<adaptive::mergedPtcls>(), "adaptive.mergedPtcls", args...);
		fn(uGet<adaptive::sharedPtcls>(), "adaptive.sharedPtcls", args...);
		fn(uGet<alembic::file_name>(), "alembic.file_name", args...);
		fn(uGet<alembic::fps>(), "alembic.fps", args...);
		fn(uGet<boundary_volumes::volumeBoundaryCounter>(), "boundary_volumes.volumeBoundaryCounter", args...);
		fn(uGet<boundary_volumes::volume>(), "boundary_volumes.volume", args...);
		fn(uGet<color_map::transfer_mode>(), "color_map.transfer_mode", args...);
		fn(uGet<color_map::mapping_mode>(), "color_map.mapping_mode", args...);
		fn(uGet<color_map::vectorMode>(), "color_map.vectorMode", args...);
		fn(uGet<color_map::visualizeDirection>(), "color_map.visualizeDirection", args...);
		fn(uGet<color_map::vectorScale>(), "color_map.vectorScale", args...);
		fn(uGet<color_map::vectorScaling>(), "color_map.vectorScaling", args...);
		fn(uGet<color_map::min>(), "color_map.min", args...);
		fn(uGet<color_map::max>(), "color_map.max", args...);
		fn(uGet<color_map::transfer_fn>(), "color_map.transfer_fn", args...);
		fn(uGet<color_map::pruneVoxel>(), "color_map.pruneVoxel", args...);
		fn(uGet<color_map::mapping_fn>(), "color_map.mapping_fn", args...);
		fn(uGet<color_map::autoScaling>(), "color_map.autoScaling", args...);
		fn(uGet<color_map::map_flipped>(), "color_map.map_flipped", args...);
		fn(uGet<color_map::buffer>(), "color_map.buffer", args...);
		fn(uGet<color_map::map>(), "color_map.map", args...);
		fn(uGet<dfsph_settings::densityError>(), "dfsph_settings.densityError", args...);
		fn(uGet<dfsph_settings::divergenceError>(), "dfsph_settings.divergenceError", args...);
		fn(uGet<dfsph_settings::densitySolverIterations>(), "dfsph_settings.densitySolverIterations", args...);
		fn(uGet<dfsph_settings::divergenceSolverIterations>(), "dfsph_settings.divergenceSolverIterations", args...);
		fn(uGet<dfsph_settings::densityEta>(), "dfsph_settings.densityEta", args...);
		fn(uGet<dfsph_settings::divergenceEta>(), "dfsph_settings.divergenceEta", args...);
		fn(uGet<iisph_settings::density_error>(), "iisph_settings.density_error", args...);
		fn(uGet<iisph_settings::iterations>(), "iisph_settings.iterations", args...);
		fn(uGet<iisph_settings::eta>(), "iisph_settings.eta", args...);
		fn(uGet<iisph_settings::jacobi_omega>(), "iisph_settings.jacobi_omega", args...);
		fn(uGet<inlet_volumes::volume>(), "inlet_volumes.volume", args...);
		fn(uGet<internal::neighborhood_kind>(), "internal.neighborhood_kind", args...);
		fn(uGet<internal::dumpNextframe>(), "internal.dumpNextframe", args...);
		fn(uGet<internal::dumpForSSSPH>(), "internal.dumpForSSSPH", args...);
		fn(uGet<internal::target>(), "internal.target", args...);
		fn(uGet<internal::hash_size>(), "internal.hash_size", args...);
		fn(uGet<internal::cell_ordering>(), "internal.cell_ordering", args...);
		fn(uGet<internal::cell_structure>(), "internal.cell_structure", args...);
		fn(uGet<internal::num_ptcls>(), "internal.num_ptcls", args...);
		fn(uGet<internal::num_ptcls_fluid>(), "internal.num_ptcls_fluid", args...);
		fn(uGet<internal::folderName>(), "internal.folderName", args...);
		fn(uGet<internal::boundaryCounter>(), "internal.boundaryCounter", args...);
		fn(uGet<internal::boundaryLUTSize>(), "internal.boundaryLUTSize", args...);
		fn(uGet<internal::frame>(), "internal.frame", args...);
		fn(uGet<internal::max_velocity>(), "internal.max_velocity", args...);
		fn(uGet<internal::min_domain>(), "internal.min_domain", args...);
		fn(uGet<internal::max_domain>(), "internal.max_domain", args...);
		fn(uGet<internal::min_coord>(), "internal.min_coord", args...);
		fn(uGet<internal::max_coord>(), "internal.max_coord", args...);
		fn(uGet<internal::cell_size>(), "internal.cell_size", args...);
		fn(uGet<internal::gridSize>(), "internal.gridSize", args...);
		fn(uGet<internal::ptcl_spacing>(), "internal.ptcl_spacing", args...);
		fn(uGet<internal::ptcl_support>(), "internal.ptcl_support", args...);
		fn(uGet<internal::config_file>(), "internal.config_file", args...);
		fn(uGet<internal::config_folder>(), "internal.config_folder", args...);
		fn(uGet<internal::working_directory>(), "internal.working_directory", args...);
		fn(uGet<internal::build_directory>(), "internal.build_directory", args...);
		fn(uGet<internal::source_directory>(), "internal.source_directory", args...);
		fn(uGet<internal::binary_directory>(), "internal.binary_directory", args...);
		fn(uGet<internal::timestep>(), "internal.timestep", args...);
		fn(uGet<internal::simulationTime>(), "internal.simulationTime", args...);
		fn(uGet<modules::adaptive>(), "modules.adaptive", args...);
		fn(uGet<modules::pressure>(), "modules.pressure", args...);
		fn(uGet<modules::volumeBoundary>(), "modules.volumeBoundary", args...);
		fn(uGet<modules::xsph>(), "modules.xsph", args...);
		fn(uGet<modules::drag>(), "modules.drag", args...);
		fn(uGet<modules::viscosity>(), "modules.viscosity", args...);
		fn(uGet<modules::tension>(), "modules.tension", args...);
		fn(uGet<modules::vorticity>(), "modules.vorticity", args...);
		fn(uGet<modules::movingBoundaries>(), "modules.movingBoundaries", args...);
		fn(uGet<modules::debug>(), "modules.debug", args...);
		fn(uGet<modules::density>(), "modules.density", args...);
		fn(uGet<modules::particleCleanUp>(), "modules.particleCleanUp", args...);
		fn(uGet<modules::volumeInlets>(), "modules.volumeInlets", args...);
		fn(uGet<modules::volumeOutlets>(), "modules.volumeOutlets", args...);
		fn(uGet<modules::logDump>(), "modules.logDump", args...);
		fn(uGet<modules::neighborhood>(), "modules.neighborhood", args...);
		fn(uGet<modules::neighborSorting>(), "modules.neighborSorting", args...);
		fn(uGet<modules::rayTracing>(), "modules.rayTracing", args...);
		fn(uGet<modules::anisotropicSurface>(), "modules.anisotropicSurface", args...);
		fn(uGet<modules::renderMode>(), "modules.renderMode", args...);
		fn(uGet<modules::resorting>(), "modules.resorting", args...);
		fn(uGet<modules::hash_width>(), "modules.hash_width", args...);
		fn(uGet<modules::alembic>(), "modules.alembic", args...);
		fn(uGet<modules::error_checking>(), "modules.error_checking", args...);
		fn(uGet<modules::gl_record>(), "modules.gl_record", args...);
		fn(uGet<modules::launch_cfg>(), "modules.launch_cfg", args...);
		fn(uGet<modules::regex_cfg>(), "modules.regex_cfg", args...);
		fn(uGet<modules::support>(), "modules.support", args...);
		fn(uGet<modules::surfaceDistance>(), "modules.surfaceDistance", args...);
		fn(uGet<modules::surfaceDetection>(), "modules.surfaceDetection", args...);
		fn(uGet<moving_plane::plane>(), "moving_plane.plane", args...);
		fn(uGet<outlet_volumes::volumeOutletCounter>(), "outlet_volumes.volumeOutletCounter", args...);
		fn(uGet<outlet_volumes::volumeOutletTime>(), "outlet_volumes.volumeOutletTime", args...);
		fn(uGet<outlet_volumes::volume>(), "outlet_volumes.volume", args...);
		fn(uGet<particleSets::set>(), "particleSets.set", args...);
		fn(uGet<particle_settings::monaghan_viscosity>(), "particle_settings.monaghan_viscosity", args...);
		fn(uGet<particle_settings::boundaryViscosity>(), "particle_settings.boundaryViscosity", args...);
		fn(uGet<particle_settings::xsph_viscosity>(), "particle_settings.xsph_viscosity", args...);
		fn(uGet<particle_settings::rigidAdhesion_akinci>(), "particle_settings.rigidAdhesion_akinci", args...);
		fn(uGet<particle_settings::boundaryAdhesion_akinci>(), "particle_settings.boundaryAdhesion_akinci", args...);
		fn(uGet<particle_settings::tension_akinci>(), "particle_settings.tension_akinci", args...);
		fn(uGet<particle_settings::air_velocity>(), "particle_settings.air_velocity", args...);
		fn(uGet<particle_settings::radius>(), "particle_settings.radius", args...);
		fn(uGet<particle_settings::first_fluid>(), "particle_settings.first_fluid", args...);
		fn(uGet<particle_settings::max_vel>(), "particle_settings.max_vel", args...);
		fn(uGet<particle_settings::min_vel>(), "particle_settings.min_vel", args...);
		fn(uGet<particle_settings::max_neighbors>(), "particle_settings.max_neighbors", args...);
		fn(uGet<particle_settings::max_density>(), "particle_settings.max_density", args...);
		fn(uGet<particle_settings::sdf_resolution>(), "particle_settings.sdf_resolution", args...);
		fn(uGet<particle_settings::sdf_epsilon>(), "particle_settings.sdf_epsilon", args...);
		fn(uGet<particle_settings::sdf_minpoint>(), "particle_settings.sdf_minpoint", args...);
		fn(uGet<particle_settings::rest_density>(), "particle_settings.rest_density", args...);
		fn(uGet<particle_volumes::volume>(), "particle_volumes.volume", args...);
		fn(uGet<render_settings::maxAnisotropicSupport>(), "render_settings.maxAnisotropicSupport", args...);
		fn(uGet<render_settings::apertureRadius>(), "render_settings.apertureRadius", args...);
		fn(uGet<render_settings::anisotropicLambda>(), "render_settings.anisotropicLambda", args...);
		fn(uGet<render_settings::anisotropicNepsilon>(), "render_settings.anisotropicNepsilon", args...);
		fn(uGet<render_settings::anisotropicKs>(), "render_settings.anisotropicKs", args...);
		fn(uGet<render_settings::anisotropicKr>(), "render_settings.anisotropicKr", args...);
		fn(uGet<render_settings::anisotropicKn>(), "render_settings.anisotropicKn", args...);
		fn(uGet<render_settings::focalDistance>(), "render_settings.focalDistance", args...);
		fn(uGet<render_settings::vrtxNeighborLimit>(), "render_settings.vrtxNeighborLimit", args...);
		fn(uGet<render_settings::vrtxFluidBias>(), "render_settings.vrtxFluidBias", args...);
		fn(uGet<render_settings::vrtxRenderDomainMin>(), "render_settings.vrtxRenderDomainMin", args...);
		fn(uGet<render_settings::vrtxRenderDomainMax>(), "render_settings.vrtxRenderDomainMax", args...);
		fn(uGet<render_settings::vrtxFlipCameraUp>(), "render_settings.vrtxFlipCameraUp", args...);
		fn(uGet<render_settings::vrtxSurfaceExtraction>(), "render_settings.vrtxSurfaceExtraction", args...);
		fn(uGet<render_settings::vrtxRenderMode>(), "render_settings.vrtxRenderMode", args...);
		fn(uGet<render_settings::vrtxRenderGrid>(), "render_settings.vrtxRenderGrid", args...);
		fn(uGet<render_settings::vrtxRenderFluid>(), "render_settings.vrtxRenderFluid", args...);
		fn(uGet<render_settings::vrtxRenderSurface>(), "render_settings.vrtxRenderSurface", args...);
		fn(uGet<render_settings::vrtxDisplayStats>(), "render_settings.vrtxDisplayStats", args...);
		fn(uGet<render_settings::vrtxRenderBVH>(), "render_settings.vrtxRenderBVH", args...);
		fn(uGet<render_settings::vrtxBVHMaterial>(), "render_settings.vrtxBVHMaterial", args...);
		fn(uGet<render_settings::vrtxRenderNormals>(), "render_settings.vrtxRenderNormals", args...);
		fn(uGet<render_settings::vrtxMaterial>(), "render_settings.vrtxMaterial", args...);
		fn(uGet<render_settings::vrtxDomainEpsilon>(), "render_settings.vrtxDomainEpsilon", args...);
		fn(uGet<render_settings::vrtxDomainMin>(), "render_settings.vrtxDomainMin", args...);
		fn(uGet<render_settings::vrtxDomainMax>(), "render_settings.vrtxDomainMax", args...);
		fn(uGet<render_settings::vrtxDebeerScale>(), "render_settings.vrtxDebeerScale", args...);
		fn(uGet<render_settings::vrtxDebeer>(), "render_settings.vrtxDebeer", args...);
		fn(uGet<render_settings::bvhColor>(), "render_settings.bvhColor", args...);
		fn(uGet<render_settings::vrtxFluidColor>(), "render_settings.vrtxFluidColor", args...);
		fn(uGet<render_settings::vrtxDepth>(), "render_settings.vrtxDepth", args...);
		fn(uGet<render_settings::vrtxDepthScale>(), "render_settings.vrtxDepthScale", args...);
		fn(uGet<render_settings::vrtxWMin>(), "render_settings.vrtxWMin", args...);
		fn(uGet<render_settings::vrtxR>(), "render_settings.vrtxR", args...);
		fn(uGet<render_settings::camera_fov>(), "render_settings.camera_fov", args...);
		fn(uGet<render_settings::vrtxWMax>(), "render_settings.vrtxWMax", args...);
		fn(uGet<render_settings::vrtxBounces>(), "render_settings.vrtxBounces", args...);
		fn(uGet<render_settings::auxScale>(), "render_settings.auxScale", args...);
		fn(uGet<render_settings::vrtxIOR>(), "render_settings.vrtxIOR", args...);
		fn(uGet<render_settings::renderSteps>(), "render_settings.renderSteps", args...);
		fn(uGet<render_settings::internalLimit>(), "render_settings.internalLimit", args...);
		fn(uGet<render_settings::auxCellCount>(), "render_settings.auxCellCount", args...);
		fn(uGet<render_settings::axesRender>(), "render_settings.axesRender", args...);
		fn(uGet<render_settings::boundsRender>(), "render_settings.boundsRender", args...);
		fn(uGet<render_settings::floorRender>(), "render_settings.floorRender", args...);
		fn(uGet<render_settings::axesScale>(), "render_settings.axesScale", args...);
		fn(uGet<render_settings::render_clamp>(), "render_settings.render_clamp", args...);
		fn(uGet<render_settings::camera_position>(), "render_settings.camera_position", args...);
		fn(uGet<render_settings::camera_angle>(), "render_settings.camera_angle", args...);
		fn(uGet<render_settings::camera_resolution>(), "render_settings.camera_resolution", args...);
		fn(uGet<render_settings::camera_fps>(), "render_settings.camera_fps", args...);
		fn(uGet<render_settings::gl_file>(), "render_settings.gl_file", args...);
		fn(uGet<resort::auxCells>(), "resort.auxCells", args...);
		fn(uGet<resort::auxCollisions>(), "resort.auxCollisions", args...);
		fn(uGet<resort::resort_algorithm>(), "resort.resort_algorithm", args...);
		fn(uGet<resort::valid_cells>(), "resort.valid_cells", args...);
		fn(uGet<resort::zOrderScale>(), "resort.zOrderScale", args...);
		fn(uGet<resort::collision_cells>(), "resort.collision_cells", args...);
		fn(uGet<resort::occupiedCells>(), "resort.occupiedCells", args...);
		fn(uGet<rigid_volumes::mesh_resolution>(), "rigid_volumes.mesh_resolution", args...);
		fn(uGet<rigid_volumes::gamma>(), "rigid_volumes.gamma", args...);
		fn(uGet<rigid_volumes::beta>(), "rigid_volumes.beta", args...);
		fn(uGet<rigid_volumes::volume>(), "rigid_volumes.volume", args...);
		fn(uGet<rtxScene::sphere>(), "rtxScene.sphere", args...);
		fn(uGet<rtxScene::box>(), "rtxScene.box", args...);
		fn(uGet<simulation_settings::external_force>(), "simulation_settings.external_force", args...);
		fn(uGet<simulation_settings::timestep_min>(), "simulation_settings.timestep_min", args...);
		fn(uGet<simulation_settings::timestep_max>(), "simulation_settings.timestep_max", args...);
		fn(uGet<simulation_settings::boundaryDampening>(), "simulation_settings.boundaryDampening", args...);
		fn(uGet<simulation_settings::LUTOffset>(), "simulation_settings.LUTOffset", args...);
		fn(uGet<simulation_settings::boundaryObject>(), "simulation_settings.boundaryObject", args...);
		fn(uGet<simulation_settings::domainWalls>(), "simulation_settings.domainWalls", args...);
		fn(uGet<simulation_settings::neighborlimit>(), "simulation_settings.neighborlimit", args...);
		fn(uGet<simulation_settings::dumpFile>(), "simulation_settings.dumpFile", args...);
		fn(uGet<simulation_settings::maxNumptcls>(), "simulation_settings.maxNumptcls", args...);
		fn(uGet<simulation_settings::hash_entries>(), "simulation_settings.hash_entries", args...);
		fn(uGet<simulation_settings::mlm_schemes>(), "simulation_settings.mlm_schemes", args...);
		fn(uGet<simulation_settings::deviceRegex>(), "simulation_settings.deviceRegex", args...);
		fn(uGet<simulation_settings::hostRegex>(), "simulation_settings.hostRegex", args...);
		fn(uGet<simulation_settings::debugRegex>(), "simulation_settings.debugRegex", args...);
		fn(uGet<simulation_settings::densitySteps>(), "simulation_settings.densitySteps", args...);
		fn(uGet<support::support_current_iteration>(), "support.support_current_iteration", args...);
		fn(uGet<support::adjusted_particles>(), "support.adjusted_particles", args...);
		fn(uGet<support::omega>(), "support.omega", args...);
		fn(uGet<support::target_neighbors>(), "support.target_neighbors", args...);
		fn(uGet<support::support_leeway>(), "support.support_leeway", args...);
		fn(uGet<support::overhead_size>(), "support.overhead_size", args...);
		fn(uGet<support::error_factor>(), "support.error_factor", args...);
		fn(uGet<surfaceDistance::surface_levelLimit>(), "surfaceDistance.surface_levelLimit", args...);
		fn(uGet<surfaceDistance::surface_neighborLimit>(), "surfaceDistance.surface_neighborLimit", args...);
		fn(uGet<surfaceDistance::surface_phiMin>(), "surfaceDistance.surface_phiMin", args...);
		fn(uGet<surfaceDistance::surface_phiChange>(), "surfaceDistance.surface_phiChange", args...);
		fn(uGet<surfaceDistance::surface_distanceFieldDistances>(), "surfaceDistance.surface_distanceFieldDistances", args...);
		fn(uGet<surfaceDistance::surface_iterations>(), "surfaceDistance.surface_iterations", args...);
		fn(uGet<vorticitySettings::intertiaInverse>(), "vorticitySettings.intertiaInverse", args...);
		fn(uGet<vorticitySettings::viscosityOmega>(), "vorticitySettings.viscosityOmega", args...);
		fn(uGet<vorticitySettings::vorticityCoeff>(), "vorticitySettings.vorticityCoeff", args...);
	}
}
